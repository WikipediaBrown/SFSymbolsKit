# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you don't want to share usage statistics with fastlane
opt_out_usage

require 'fileutils'


default_platform(:ios)

project_name = File.basename(Pathname.getwd.parent) # This just gets the name of the projects directory

platform :ios do

  desc 'Run iOS & macOS Unit Tests'
  lane :unit_test do
    unit_test_iOS
    unit_test_macOS
  end

  desc 'Run iOS Unit Tests'
  lane :unit_test_iOS do
    COVERAGE_OUTPUT_PATH = './docs/iOS-Coverage'
    clear_derived_data(derived_data_path: COVERAGE_OUTPUT_PATH)
    run_tests(
      package_path: ".",
      scheme: "#{project_name}",
      device: 'iPhone 15 Pro',
      code_coverage: true,
      output_directory: COVERAGE_OUTPUT_PATH,
      output_types: 'html',
      result_bundle: true,
      clean: true
    )
    xcov(
       is_swift_package: true,
       output_directory: COVERAGE_OUTPUT_PATH,
       markdown_report: true,
       minimum_coverage_percentage: 99.999 # Cannot be 100% because xcov has a bug where it wont support total code coverage.
    )
    danger(
       danger_id: 'unit-tests-iOS',
       dangerfile: 'DangerFile',
       github_api_token: ENV['GITHUB_TOKEN'],
       verbose: true
    ) if ENV['CI']
  end

  desc 'Run macOS Unit Tests'
  lane :unit_test_macOS do
    COVERAGE_OUTPUT_PATH = './docs/macOS-Coverage'
    clear_derived_data(derived_data_path: COVERAGE_OUTPUT_PATH)
    run_tests(
      package_path: ".",
      scheme: "#{project_name}",
      destination: 'platform=macOS',
      code_coverage: true,
      output_directory: COVERAGE_OUTPUT_PATH,
      output_types: 'html',
      result_bundle: true,
      clean: true
    )
    xcov(
       is_swift_package: true,
       output_directory: COVERAGE_OUTPUT_PATH,
       markdown_report: true,
       minimum_coverage_percentage: 99.999 # Cannot be 100% because xcov has a bug where it wont support total code coverage.
    )
    danger(
       danger_id: 'unit-tests-macOS',
       dangerfile: 'DangerFile',
       github_api_token: ENV['GITHUB_TOKEN'],
       verbose: true
    ) if ENV['CI']
  end

  desc 'Create Release for GitHub'
  lane :release_to_github do
    new_version = create_next_version
    day = Time.now.strftime("%A")
    changelog = changelog_from_git_commits(
      date_format: 'short',
      merge_commit_filtering: 'exclude_merges',
      pretty: "- (%ae) %s"
    )
    github_release = set_github_release(
      repository_name: ENV['REPOSITORY_NAME'],
      api_bearer: ENV['GITHUB_TOKEN'],
      name: "#{new_version} - This #{day}'s Version",
      tag_name: new_version,
      description: changelog
    )
  end

  desc 'Create tag with version written in file'
  lane :create_next_version do
    sh('git fetch --tags')
    new_version = increment_version
    add_git_tag(tag: new_version, message: 'Version 5.1')
    push_to_git_remote(tags: true, remote_branch: "refs/tags/#{new_version}")
    new_version
  end

  # Increments and returns version of last tag. Pass the string `major
  # or `minor` to increment major or minor version. Otherwise a the
  # patch is incremented.
  def increment_version(bump="")
    major, minor, patch = last_git_tag.split('.').map(&:to_i)

    case bump.downcase
    when 'major'
       major += 1
       minor = 0
       patch = 0
    when 'minor'
       minor += 1
       patch = 0
    else patch += 1
    end

    return [major, minor, patch].join('.')
  end

end
