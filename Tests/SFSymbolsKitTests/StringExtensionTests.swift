//
//  StringExtensionTests.swift
//  SFSymbols
//
//  Generated by SFSymbolsKit on 5/15/24.
//

import XCTest
@testable import SFSymbolsKit

final class StringExtensionTests: XCTestCase {

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowUpOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpOnsquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowUpOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowUpOnsquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowDownOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowDownOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndArrowDownOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownOnsquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndArrowDownOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndArrowDownOnsquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitAndArrowRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitAndArrowRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitAndArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitAndArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitAndArrowForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencil
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencil
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eraser_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraser
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eraser_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraser
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eraserFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eraserFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eraserLineDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserLineDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eraserLineDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserLineDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eraserLineDashedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserLineDashedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eraserLineDashedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eraserLineDashedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndPencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencil
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndPencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencil
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndPencilCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencilCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndPencilCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencilCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndPencilCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencilCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndPencilCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndPencilCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndPencilAndEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndPencilAndEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndPencilAndEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndPencilAndEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scribble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scribble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scribbleVariable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scribbleVariable
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scribbleVariable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scribbleVariable
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilAndScribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndScribble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilAndScribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndScribble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_highlighter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.highlighter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_highlighter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.highlighter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilAndOutline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndOutline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilAndOutline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndOutline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgeMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeMinusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgeMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeMinusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgeArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgeArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilTipCropCircleBadgeArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeArrowForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilTipCropCircleBadgeArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilTipCropCircleBadgeArrowForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lasso_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lasso
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lasso_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lasso
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lassoBadgeSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lassoBadgeSparkles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lassoBadgeSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lassoBadgeSparkles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trashSlashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trashSlashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trashSlashSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpTrash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpTrash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpTrash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpTrash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpTrashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpTrashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpTrashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpTrashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x1FolderBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1FolderBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x1FolderBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1FolderBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x1FolderFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1FolderFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x1FolderFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1FolderFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeGearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderBadgeGearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_folderFillBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeGearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_folderFillBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.folderFillBadgeGearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangleOnFolder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnFolder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangleOnFolder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnFolder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangleOnFolderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnFolderFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangleOnFolderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnFolderFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkFolder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkFolder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkFolder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkFolder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkFolderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkFolderFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkFolderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkFolderFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperplane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperplane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperplaneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperplaneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperplaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperplaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperplaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperplaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperplaneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayFull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFull
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayFull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFull
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayFullFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFullFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayFullFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayFullFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trayAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trayAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trayAndArrowDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tray2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tray2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tray2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tray2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tray2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldrive
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldrive
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeWifi
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeWifi
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeWifi
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeWifi
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveBadgeTimemachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeTimemachine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveBadgeTimemachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveBadgeTimemachine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveFillBadgeTimemachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeTimemachine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveFillBadgeTimemachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveFillBadgeTimemachine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_internaldrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.internaldrive
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_internaldrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.internaldrive
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_internaldriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.internaldriveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_internaldriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.internaldriveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticaldiscdrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscdrive
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticaldiscdrive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscdrive
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticaldiscdriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscdriveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticaldiscdriveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscdriveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveConnectedToLineBelow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveConnectedToLineBelow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveConnectedToLineBelow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveConnectedToLineBelow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_externaldriveConnectedToLineBelowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveConnectedToLineBelowFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_externaldriveConnectedToLineBelowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.externaldriveConnectedToLineBelowFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_archivebox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archivebox
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_archivebox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archivebox
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_archiveboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_archiveboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_archiveboxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_archiveboxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_archiveboxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_archiveboxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.archiveboxCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkBin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkBin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkBinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkBinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkBinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkBinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkBinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkBinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkBinCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeArrowUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeArrowUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFillBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docFillBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeGearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeGearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docBadgeGearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeGearshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docBadgeGearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docBadgeGearshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDoc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDoc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDocFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDocFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDoc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDoc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDocFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDocFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownDoc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownDoc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownDocFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownDocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownDocFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docText
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docText
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docZipper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docZipper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docZipper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docZipper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docOnDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnDoc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docOnDoc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnDoc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docOndocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOndocFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docOndocFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOndocFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docOnClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnClipboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docOnClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docOnClipboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightDocOnClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightDocOnClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDocOnClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpDocOnClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathDocOnClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathDocOnClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathDocOnClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clipboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clipboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletClipboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletClipboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listClipboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listClipboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listClipboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilAndListClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndListClipboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilAndListClipboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndListClipboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docRichtext_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docRichtext
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docRichtext_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docRichtext
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docRichtextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docRichtextFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docRichtextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docRichtextFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docPlaintext_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docPlaintext
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docPlaintext_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docPlaintext
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docPlaintextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docPlaintextFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docPlaintextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docPlaintextFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docAppend_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docAppend
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docAppend_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docAppend
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docAppendFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docAppendFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docAppendFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docAppendFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextBelowEcg_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextBelowEcg
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextBelowEcg_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextBelowEcg
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextBelowEcgFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextBelowEcgFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextBelowEcgFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextBelowEcgFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docQuestionmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docQuestionmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarDocHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarDocHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarDocHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarDocHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarDocHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarDocHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarDocHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarDocHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookPages_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookPages
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookPages_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookPages
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookPagesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookPagesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookPagesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookPagesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listDashHeaderRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listDashHeaderRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listDashHeaderRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listDashHeaderRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appleTerminal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appleTerminal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appleTerminalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appleTerminalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appleTerminalOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appleTerminalOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appleTerminalOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appleTerminalOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleTerminalOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_note_returnsImage() {
        // Arrange
        let string = String.SFSymbols.note
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_note_returnsImage() {
        // Arrange
        let string = String.SFSymbols.note
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_noteText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noteText
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_noteText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noteText
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_noteTextBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noteTextBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_noteTextBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noteTextBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarDayTimelineLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarDayTimelineLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarDayTimelineRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarDayTimelineRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarDayTimelineLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarDayTimelineLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_calendarDayTimelineTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_calendarDayTimelineTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.calendarDayTimelineTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeftarrowshapeRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftarrowshapeRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeftarrowshapeRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftarrowshapeRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeLeftarrowshapeRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftarrowshapeRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeLeftarrowshapeRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeLeftarrowshapeRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackwardBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackwardBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackwardBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackwardBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackwardBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeft2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeft2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeft2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeft2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpLeft2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpLeft2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpLeft2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackward2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackward2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackward2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackward2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeTurnUpBackward2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeTurnUpBackward2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeTurnUpBackward2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeZigzagRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeZigzagRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeZigzagRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeZigzagRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeZigzagForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeZigzagForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeZigzagForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeZigzagForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeZigzagForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBounceRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBounceRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBounceRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBounceRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBounceForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBounceForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowshapeBounceForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowshapeBounceForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowshapeBounceForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_book_returnsImage() {
        // Arrange
        let string = String.SFSymbols.book
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_book_returnsImage() {
        // Arrange
        let string = String.SFSymbols.book
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_booksVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_booksVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_booksVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_booksVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_booksVerticalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_booksVerticalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_booksVerticalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_booksVerticalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.booksVerticalCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookClosedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookClosedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookClosedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookClosedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookClosedCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterBookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBookClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterBookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBookClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterBookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBookClosedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterBookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBookClosedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBookClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBookClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBookClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBookClosedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBookClosedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBookClosedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menucard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menucard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menucard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menucard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menucardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menucardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menucardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menucardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greetingcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greetingcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greetingcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greetingcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greetingcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greetingcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greetingcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greetingcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magazine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magazine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magazine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magazine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magazineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magazineFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magazineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magazineFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_newspaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_newspaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_newspaperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_newspaperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_newspaperCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_newspaperCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_newspaperCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_newspaperCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.newspaperCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextImage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextImage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docTextImageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextImageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docTextImageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docTextImageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookmarkSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookmarkSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookmarkSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_graduationcap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_graduationcap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_graduationcapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_graduationcapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_graduationcapCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_graduationcapCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_graduationcapCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_graduationcapCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.graduationcapCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilAndRuler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndRuler
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilAndRuler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndRuler
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pencilAndRulerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndRulerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pencilAndRulerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pencilAndRulerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ruler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ruler
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ruler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ruler
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rulerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rulerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rulerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rulerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backpack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backpack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backpackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backpackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backpackCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backpackCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backpackCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backpackCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backpackCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_studentdesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.studentdesk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_studentdesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.studentdesk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperclipCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperclipCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperclipCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperclipCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paperclipBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paperclipBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paperclipBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndPaperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndPaperclip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndPaperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndPaperclip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleDashedAndPaperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashedAndPaperclip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleDashedAndPaperclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashedAndPaperclip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_link_returnsImage() {
        // Arrange
        let string = String.SFSymbols.link
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_link_returnsImage() {
        // Arrange
        let string = String.SFSymbols.link
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linkBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linkBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personalhotspot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personalhotspot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personalhotspotCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspotCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personalhotspotCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspotCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personalhotspotCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspotCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personalhotspotCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personalhotspotCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillTurnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillTurnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillTurnDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillTurnDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillTurnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillTurnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillTurnLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeShieldCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeShieldCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeShieldCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeShieldCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeShieldCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeShieldCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeShieldCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeShieldCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeKey
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeKey
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBadgeKeyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeKeyFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBadgeKeyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBadgeKeyFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2BadgeKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeKey
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2BadgeKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeKey
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2BadgeKeyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeKeyFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2BadgeKeyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeKeyFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shareplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shareplay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shareplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shareplay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shareplaySlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shareplaySlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shareplaySlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shareplaySlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetFilledAndPersonFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledAndPersonFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetFilledAndPersonFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledAndPersonFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetFilledBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledBadgeRecord
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetFilledBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledBadgeRecord
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetFilledAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledAndCursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetFilledAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledAndCursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sharedWithYou_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYou
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sharedWithYou_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYou
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sharedWithYouCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sharedWithYouCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sharedWithYouCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sharedWithYouCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sharedWithYouSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sharedWithYouSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sharedWithYouSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndArrowLeftAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndArrowLeftAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillAndArrowLeftAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillAndArrowLeftAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2SlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2SlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Gobackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Gobackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2BadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeGearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2BadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeGearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2BadgeGearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeGearshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2BadgeGearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2BadgeGearshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personWave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personWave2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personWave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personWave2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personWave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personWave2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personWave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personWave2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Wave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Wave2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Wave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Wave2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2Wave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Wave2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2Wave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2Wave2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personLineDottedPerson_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personLineDottedPerson
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personLineDottedPerson_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personLineDottedPerson
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personLineDottedpersonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personLineDottedpersonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personLineDottedpersonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personLineDottedpersonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person3Sequence_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3Sequence
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person3Sequence_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3Sequence
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person3SequenceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3SequenceFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person3SequenceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person3SequenceFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lanyardcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lanyardcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lanyardcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lanyardcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lanyardcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lanyardcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lanyardcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lanyardcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleFillBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeQuestionmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeQuestionmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMoon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMoon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeMoonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMoonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeMoonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeMoonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleDashedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleDashedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropCircleDashedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashedCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropCircleDashedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropCircleDashedCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareBadgeCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeCamera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareBadgeCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeCamera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareBadgeCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeCameraFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareBadgeCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeCameraFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareBadgeVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeVideo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareBadgeVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeVideo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareBadgeVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeVideoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareBadgeVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareBadgeVideoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropArtframe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropArtframe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropArtframe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropArtframe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoArtframe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoArtframe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoArtframeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoArtframeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoArtframeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoArtframeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoArtframeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBust
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBust
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBustCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2CropSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CropSquareStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2CropSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CropSquareStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_person2CropSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CropSquareStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_person2CropSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.person2CropSquareStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropRectangleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropRectangleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropRectangleBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndPersonRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndPersonRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndPersonRectangleTurnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectangleTurnRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndPersonRectangleTurnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectangleTurnRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndPersonRectangleTurnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectangleTurnLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndPersonRectangleTurnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndPersonRectangleTurnLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareFilledAndAtRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFilledAndAtRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareFilledAndAtRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFilledAndAtRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personCropSquareFilledAndAtRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFilledAndAtRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personCropSquareFilledAndAtRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personCropSquareFilledAndAtRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndAtRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndAtRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndAtRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndAtRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndAtRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndAtRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndAtRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndAtRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personTextRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personTextRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personTextRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personTextRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personTextRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personTextRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personTextRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personTextRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCheckered
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCheckered
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personAndBackgroundDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndBackgroundDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personAndBackgroundDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndBackgroundDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personAndBackgroundStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndBackgroundStripedHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personAndBackgroundStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personAndBackgroundStripedHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStand_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStand
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStand_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStand
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStandLineDottedfigureStand_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStandLineDottedfigureStand
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStandLineDottedfigureStand_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStandLineDottedfigureStand
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureDressLineVerticalFigure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDressLineVerticalFigure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureDressLineVerticalFigure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDressLineVerticalFigure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureArmsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureArmsOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureArmsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureArmsOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure2ArmsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2ArmsOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure2ArmsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2ArmsOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure2AndChildHoldinghands_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2AndChildHoldinghands
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure2AndChildHoldinghands_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2AndChildHoldinghands
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureAndChildHoldinghands_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAndChildHoldinghands
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureAndChildHoldinghands_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAndChildHoldinghands
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_accessibility_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibility
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_accessibility_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibility
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_accessibilityFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibilityFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_accessibilityFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibilityFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_voiceover_returnsImage() {
        // Arrange
        let string = String.SFSymbols.voiceover
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_voiceover_returnsImage() {
        // Arrange
        let string = String.SFSymbols.voiceover
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_accessibilityBadgeArrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibilityBadgeArrowUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_accessibilityBadgeArrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.accessibilityBadgeArrowUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figure2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figure2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figure2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkArrival_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkArrival
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkArrival_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkArrival
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkDeparture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDeparture
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkDeparture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkDeparture
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkMotion_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkMotion
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkMotion_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkMotion
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWalkMotionTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkMotionTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWalkMotionTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWalkMotionTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWave
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWave
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWaveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaveCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWaveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaveCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWaveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaveCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWaveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaveCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFall
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFall
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFallCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFallCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFallCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFallCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFallCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFallCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFallCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFallCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRun
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRun
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRunSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunSquareStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRunSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunSquareStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRunSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunSquareStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRunSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRunSquareStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRoll_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRoll
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRoll_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRoll
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRollRunningpace_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRollRunningpace
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRollRunningpace_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRollRunningpace
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureAmericanFootball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAmericanFootball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureAmericanFootball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAmericanFootball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureArchery_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureArchery
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureArchery_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureArchery
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureAustralianFootball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAustralianFootball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureAustralianFootball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureAustralianFootball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBadminton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBadminton
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBadminton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBadminton
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBarre_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBarre
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBarre_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBarre
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBaseball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBaseball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBaseball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBaseball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBasketball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBasketball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBasketball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBasketball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBowling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBowling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBowling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBowling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureBoxing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBoxing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureBoxing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureBoxing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureClimbing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureClimbing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureClimbing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureClimbing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureCooldown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCooldown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureCooldown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCooldown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureCoreTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCoreTraining
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureCoreTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCoreTraining
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureCricket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCricket
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureCricket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCricket
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSkiingCrosscountry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkiingCrosscountry
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSkiingCrosscountry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkiingCrosscountry
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureCrossTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCrossTraining
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureCrossTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCrossTraining
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureCurling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCurling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureCurling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureCurling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureDance_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDance
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureDance_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDance
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureDiscSports_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDiscSports
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureDiscSports_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureDiscSports
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSkiingDownhill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkiingDownhill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSkiingDownhill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkiingDownhill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureElliptical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureElliptical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureElliptical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureElliptical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureEquestrianSports_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureEquestrianSports
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureEquestrianSports_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureEquestrianSports
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFencing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFencing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFencing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFencing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFishing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFishing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFishing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFishing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureFlexibility_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFlexibility
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureFlexibility_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureFlexibility
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStrengthtrainingFunctional_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStrengthtrainingFunctional
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStrengthtrainingFunctional_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStrengthtrainingFunctional
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureGolf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureGolf
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureGolf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureGolf
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureGymnastics_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureGymnastics
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureGymnastics_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureGymnastics
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHandCycling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHandCycling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHandCycling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHandCycling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHandball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHandball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHandball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHandball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHighintensityIntervaltraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHighintensityIntervaltraining
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHighintensityIntervaltraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHighintensityIntervaltraining
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHiking_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHiking
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHiking_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHiking
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHockey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHockey
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHockey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHockey
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureHunting_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHunting
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureHunting_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureHunting
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureIndoorCycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureIndoorCycle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureIndoorCycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureIndoorCycle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureJumprope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureJumprope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureJumprope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureJumprope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureKickboxing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureKickboxing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureKickboxing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureKickboxing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureLacrosse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureLacrosse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureLacrosse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureLacrosse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureMartialArts_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMartialArts
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureMartialArts_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMartialArts
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureMindAndBody_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMindAndBody
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureMindAndBody_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMindAndBody
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureMixedCardio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMixedCardio
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureMixedCardio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureMixedCardio
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureOpenWaterSwim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureOpenWaterSwim
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureOpenWaterSwim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureOpenWaterSwim
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureOutdoorCycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureOutdoorCycle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureOutdoorCycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureOutdoorCycle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oar2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oar2Crossed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oar2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oar2Crossed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figurePickleball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePickleball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figurePickleball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePickleball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figurePilates_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePilates
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figurePilates_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePilates
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figurePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figurePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figurePoolSwim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePoolSwim
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figurePoolSwim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figurePoolSwim
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRacquetball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRacquetball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRacquetball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRacquetball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRolling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRolling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRolling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRolling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureRugby_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRugby
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureRugby_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureRugby
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSkating_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkating
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSkating_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSkating
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSnowboarding_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSnowboarding
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSnowboarding_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSnowboarding
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSoccer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSoccer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSoccer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSoccer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSocialdance_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSocialdance
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSocialdance_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSocialdance
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSoftball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSoftball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSoftball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSoftball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSquash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSquash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSquash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSquash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStairStepper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStairStepper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStairStepper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStairStepper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStairs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStairs
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStairs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStairs
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStepTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStepTraining
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStepTraining_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStepTraining
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSurfing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSurfing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSurfing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSurfing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureTableTennis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTableTennis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureTableTennis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTableTennis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureTaichi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTaichi
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureTaichi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTaichi
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureTennis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTennis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureTennis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTennis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureTrackAndField_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTrackAndField
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureTrackAndField_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureTrackAndField
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureStrengthtrainingTraditional_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStrengthtrainingTraditional
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureStrengthtrainingTraditional_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureStrengthtrainingTraditional
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureVolleyball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureVolleyball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureVolleyball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureVolleyball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWaterFitness_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaterFitness
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWaterFitness_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaterFitness
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWaterpolo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaterpolo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWaterpolo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWaterpolo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureWrestling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWrestling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureWrestling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureWrestling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureYoga_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureYoga
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureYoga_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureYoga
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_baseballDiamondBases_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballDiamondBases
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_baseballDiamondBases_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballDiamondBases
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dumbbell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dumbbell
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dumbbell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dumbbell
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dumbbellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dumbbellFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dumbbellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dumbbellFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sportscourt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sportscourt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sportscourtFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sportscourtFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sportscourtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sportscourtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sportscourtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sportscourtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sportscourtCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_threeLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_threeLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fiveLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fiveLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sevenLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sevenLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eightLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eightLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one0Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Lane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one0Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Lane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one1Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Lane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one1Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Lane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one2Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Lane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one2Lane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Lane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerballInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerballInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerballCircleInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerballCircleInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_soccerballCircleFillInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleFillInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_soccerballCircleFillInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.soccerballCircleFillInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_baseball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_baseball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_baseballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_baseballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_baseballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_baseballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_baseballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_baseballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.baseballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basketball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basketball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basketballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basketballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basketballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basketballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basketballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basketballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_football_returnsImage() {
        // Arrange
        let string = String.SFSymbols.football
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_football_returnsImage() {
        // Arrange
        let string = String.SFSymbols.football
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_footballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_footballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_footballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_footballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_footballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_footballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.footballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisRacket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacket
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisRacket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacket
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisRacketCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacketCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisRacketCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacketCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisRacketCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacketCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisRacketCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisRacketCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hockeyPuck_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuck
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hockeyPuck_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuck
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hockeyPuckFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hockeyPuckFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hockeyPuckCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hockeyPuckCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hockeyPuckCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hockeyPuckCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hockeyPuckCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cricketBall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBall
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cricketBall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBall
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cricketBallFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cricketBallFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cricketBallCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cricketBallCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cricketBallCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cricketBallCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cricketBallCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tennisballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tennisballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tennisballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_volleyball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyball
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_volleyball_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyball
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_volleyballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_volleyballFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_volleyballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_volleyballCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_volleyballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_volleyballCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.volleyballCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_skateboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skateboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_skateboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skateboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_skateboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skateboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_skateboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skateboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_skis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_skis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_skisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skisFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_skisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skisFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_surfboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.surfboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_surfboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.surfboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_surfboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.surfboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_surfboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.surfboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gymBag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gymBag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gymBag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gymBag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gymBagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gymBagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gymBagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gymBagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rosette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rosette
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rosette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rosette
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trophy_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophy
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trophy_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophy
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trophyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trophyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trophyCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trophyCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trophyCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trophyCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trophyCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_medal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_medal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_medalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_medalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_command_returnsImage() {
        // Arrange
        let string = String.SFSymbols.command
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_command_returnsImage() {
        // Arrange
        let string = String.SFSymbols.command
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_commandCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_commandCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_commandCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_commandCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_commandSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_commandSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_commandSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_commandSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.commandSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_space_returnsImage() {
        // Arrange
        let string = String.SFSymbols.space
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_space_returnsImage() {
        // Arrange
        let string = String.SFSymbols.space
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_option_returnsImage() {
        // Arrange
        let string = String.SFSymbols.option
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_option_returnsImage() {
        // Arrange
        let string = String.SFSymbols.option
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_control_returnsImage() {
        // Arrange
        let string = String.SFSymbols.control
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_control_returnsImage() {
        // Arrange
        let string = String.SFSymbols.control
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_projective_returnsImage() {
        // Arrange
        let string = String.SFSymbols.projective
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_projective_returnsImage() {
        // Arrange
        let string = String.SFSymbols.projective
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRightToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRightToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_escape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.escape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_escape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.escape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_restart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_restart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_restartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restartCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_restartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restartCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_restartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restartCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_restartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.restartCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sleep_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleep
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sleep_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleep
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sleepCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleepCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sleepCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleepCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sleepCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleepCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sleepCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sleepCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wake
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wake
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wakeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wakeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wakeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wakeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightMin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightMin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightMax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightMax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_power_returnsImage() {
        // Arrange
        let string = String.SFSymbols.power
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_power_returnsImage() {
        // Arrange
        let string = String.SFSymbols.power
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powerDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powerDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_togglepower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.togglepower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_togglepower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.togglepower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweron_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweron
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweron_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweron
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroff
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroff
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powersleep_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powersleep
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powersleep_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powersleep
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_directcurrent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.directcurrent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_directcurrent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.directcurrent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alternatingcurrent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alternatingcurrent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alternatingcurrent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alternatingcurrent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clearFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clearFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deleteForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deleteForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deleteForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shift
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shift
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shiftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shiftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shiftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shiftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capslock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capslock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capslock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capslock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capslockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capslockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capslockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capslockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eject_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eject
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eject_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eject
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ejectFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ejectFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ejectCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ejectCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ejectCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ejectCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ejectCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mount_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mount
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mount_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mount
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mountFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mountFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rays
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rays
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowRays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowRays
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowRays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowRays
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_slowmo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slowmo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_slowmo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slowmo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timelapse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timelapse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timelapse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timelapse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowSlashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlashSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowSlashSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlashSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowSlashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlashSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowSlashSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowSlashSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowMotionlines_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowMotionlines
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowMotionlines_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowMotionlines
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowMotionlinesClick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowMotionlinesClick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowMotionlinesClick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowMotionlinesClick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowClickBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClickBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowClickBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClickBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowAndSquareOnSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowAndSquareOnSquareDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowAndSquareOnSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowAndSquareOnSquareDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleBadgeGearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleBadgeGearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleBadgeGearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowClick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowClick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cursorarrowClick2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClick2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cursorarrowClick2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cursorarrowClick2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_contextualmenuAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contextualmenuAndCursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_contextualmenuAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contextualmenuAndCursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filemenuAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filemenuAndCursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filemenuAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filemenuAndCursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotsAndLineVerticalAndCursorarrowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotsAndLineVerticalAndCursorarrowRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotsAndLineVerticalAndCursorarrowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotsAndLineVerticalAndCursorarrowRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filemenuAndSelection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filemenuAndSelection
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filemenuAndSelection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filemenuAndSelection
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotCircleAndHandPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleAndHandPointUpLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotCircleAndHandPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleAndHandPointUpLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotCircleAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleAndCursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotCircleAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleAndCursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEllipsisFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEllipsisFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardBadgeEye_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEye
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardBadgeEye_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEye
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardBadgeEyeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEyeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardBadgeEyeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardBadgeEyeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardChevronCompactDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardChevronCompactDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardChevronCompactDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardChevronCompactDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardChevronCompactLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardChevronCompactLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardChevronCompactLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardChevronCompactLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardChevronCompactLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardOnehandedLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardOnehandedLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardOnehandedLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardOnehandedLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardOnehandedRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardOnehandedRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardOnehandedRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardOnehandedRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardOnehandedRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_peacesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.peacesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_peacesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.peacesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeBadgeChevronBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeBadgeChevronBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeBadgeChevronBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeBadgeChevronBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_network_returnsImage() {
        // Arrange
        let string = String.SFSymbols.network
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_network_returnsImage() {
        // Arrange
        let string = String.SFSymbols.network
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_networkSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.networkSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_networkSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.networkSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_networkBadgeShieldHalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.networkBadgeShieldHalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_networkBadgeShieldHalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.networkBadgeShieldHalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeAmericas_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAmericas
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeAmericas_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAmericas
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeAmericasFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAmericasFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeAmericasFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAmericasFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeEuropeAfrica_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeEuropeAfrica
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeEuropeAfrica_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeEuropeAfrica
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeEuropeAfricaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeEuropeAfricaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeEuropeAfricaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeEuropeAfricaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeAsiaAustralia_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAsiaAustralia
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeAsiaAustralia_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAsiaAustralia
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeAsiaAustraliaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAsiaAustraliaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeAsiaAustraliaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeAsiaAustraliaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeCentralSouthAsia_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeCentralSouthAsia
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeCentralSouthAsia_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeCentralSouthAsia
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeCentralSouthAsiaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeCentralSouthAsiaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeCentralSouthAsiaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeCentralSouthAsiaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMaxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMaxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMaxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMaxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMaxTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMaxTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunMaxTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunMaxTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunMaxTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunrise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunrise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunrise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunrise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunriseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunriseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunriseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunriseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunriseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunriseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunriseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunset_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunset
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunset_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunset
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunsetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunsetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunsetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunsetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunsetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunsetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunsetCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHorizon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHorizon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHorizonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHorizonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHorizonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHorizonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHorizonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHorizonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHorizonCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunDust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDust
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunDust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDust
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunDustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunDustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunDustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunDustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunDustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunDustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunDustCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHaze_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHaze
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHaze_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHaze
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHazeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHazeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHazeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHazeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunHazeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunHazeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunHazeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunRainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunSnowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunSnowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunSnowCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseNewMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseNewMoon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseNewMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseNewMoon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaxingCrescent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingCrescent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaxingCrescent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingCrescent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseFirstQuarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFirstQuarter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseFirstQuarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFirstQuarter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaxingGibbous_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingGibbous
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaxingGibbous_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingGibbous
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseFullMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFullMoon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseFullMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFullMoon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaningGibbous_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningGibbous
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaningGibbous_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningGibbous
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseLastQuarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseLastQuarter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseLastQuarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseLastQuarter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaningCrescent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningCrescent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaningCrescent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningCrescent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseNewMoonInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseNewMoonInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseNewMoonInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseNewMoonInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaxingCrescentInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingCrescentInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaxingCrescentInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingCrescentInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseFirstQuarterInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFirstQuarterInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseFirstQuarterInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFirstQuarterInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaxingGibbousInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingGibbousInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaxingGibbousInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaxingGibbousInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseFullMoonInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFullMoonInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseFullMoonInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseFullMoonInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaningGibbousInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningGibbousInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaningGibbousInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningGibbousInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseLastQuarterInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseLastQuarterInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseLastQuarterInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseLastQuarterInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonphaseWaningCrescentInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningCrescentInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonphaseWaningCrescentInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonphaseWaningCrescentInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zzz
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zzz
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonrise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonrise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonrise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonrise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonriseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonriseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonriseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonriseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonriseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonriseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonriseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonset_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonset
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonset_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonset
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonsetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonsetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonsetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonsetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonsetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonsetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonsetCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonDust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDust
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonDust_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDust
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonDustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonDustFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonDustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonDustCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonDustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonDustCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonDustCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonHaze_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHaze
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonHaze_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHaze
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonHazeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonHazeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonHazeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonHazeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonHazeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonHazeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonHazeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonZzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonZzz
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonZzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonZzz
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonZzzFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonZzzFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonZzzFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonZzzFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparkle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparkle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonStars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStars
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonStars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStars
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonStarsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonStarsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonStarsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonStarsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_moonStarsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_moonStarsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.moonStarsCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudDrizzle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudDrizzle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudDrizzleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudDrizzleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudDrizzleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudDrizzleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudDrizzleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudDrizzleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudDrizzleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHeavyrain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHeavyrain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHeavyrainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHeavyrainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHeavyrainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHeavyrainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHeavyrainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHeavyrainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHeavyrainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFog
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFog
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudFogCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudFogCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudFogCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudFogCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudFogCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHail
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHail
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHailCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHailCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudHailCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudHailCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudHailCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSnowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSnowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSnowCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSleet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleet
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSleet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleet
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSleetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSleetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSleetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSleetCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSleetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSleetCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSleetCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBolt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBolt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudBoltRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudBoltRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudBoltRainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSun
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSun
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunRainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBolt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBolt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudSunBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudSunBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudSunBoltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonRain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonRainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonRainCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonRainCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonRainCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBolt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBolt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonBoltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonBoltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudMoonBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudMoonBoltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudMoonBoltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smoke_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smoke
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smoke_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smoke
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smokeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smokeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smokeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smokeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smokeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smokeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smokeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wind_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wind
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wind_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wind
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windSnow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnowCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windSnowCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnowCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnowCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windSnowCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windSnowCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflake
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflake
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflakeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflakeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tornado_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornado
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tornado_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornado
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tornadoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornadoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tornadoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornadoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tornadoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornadoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tornadoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tornadoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tropicalstorm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstorm
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tropicalstorm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstorm
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tropicalstormCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstormCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tropicalstormCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstormCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tropicalstormCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstormCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tropicalstormCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tropicalstormCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hurricane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hurricane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hurricaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricaneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hurricaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricaneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hurricaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricaneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hurricaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hurricaneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSun
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSun_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSun
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSunFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSunFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSunCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSunCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSunCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSnowflake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflake
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSnowflake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflake
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSnowflakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflakeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSnowflakeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflakeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerSnowflakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflakeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerSnowflakeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerSnowflakeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerVariableAndFigure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerVariableAndFigure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerVariableAndFigureCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigureCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerVariableAndFigureCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigureCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerVariableAndFigureCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigureCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerVariableAndFigureCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerVariableAndFigureCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerLow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerLow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerMedium
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerMedium
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerHigh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerHigh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerMediumSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerMediumSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerMediumSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerMediumSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aqiLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiLow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aqiLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiLow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aqiMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiMedium
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aqiMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiMedium
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aqiHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiHigh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aqiHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aqiHigh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidity_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidity
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidity_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidity
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidityFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidityFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidityFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidityFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rainbow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rainbow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rainbow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rainbow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRainbowHalf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainbowHalf
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRainbowHalf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainbowHalf
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cloudRainbowHalfFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainbowHalfFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cloudRainbowHalfFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cloudRainbowHalfFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterWavesSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterWavesSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterWavesAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterWavesAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterWavesAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterWavesAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterWavesAndArrowDownTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowDownTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterWavesAndArrowDownTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterWavesAndArrowDownTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_drop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.drop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_drop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.drop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropDegreesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropDegreesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropDegreesignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropDegreesignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropDegreesignSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropDegreesignSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropDegreesignSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropDegreesignSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropDegreesignSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropTriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropTriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flame
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flame
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flameCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flameCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flameCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flameCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flameCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beachUmbrella_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beachUmbrella
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beachUmbrella_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beachUmbrella
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beachUmbrellaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beachUmbrellaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beachUmbrellaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beachUmbrellaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_umbrella_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrella
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_umbrella_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrella
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_umbrellaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_umbrellaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_umbrellaPercent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaPercent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_umbrellaPercent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaPercent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_umbrellaPercentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaPercentFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_umbrellaPercentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.umbrellaPercentFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_play_returnsImage() {
        // Arrange
        let string = String.SFSymbols.play
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_play_returnsImage() {
        // Arrange
        let string = String.SFSymbols.play
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSquareStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pause_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pause
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pause_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pause
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pauseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pauseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pauseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pauseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pauseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pauseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pauseRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pauseRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pauseRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pauseRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pauseRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stopCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stopCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stopCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stopCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_recordCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_recordCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_recordCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_recordCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playpause_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpause
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playpause_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpause
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playpauseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playpauseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playpauseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playpauseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playpauseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playpauseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playpauseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEnd_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEnd
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEnd_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEnd
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEndFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEndFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEndCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEndCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEnd_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEnd
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEnd_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEnd
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEndFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEndFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEndCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEndCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEndAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndAlt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEndAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndAlt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardEndAltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndAltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardEndAltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardEndAltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEndAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndAlt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEndAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndAlt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardEndAltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndAltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardEndAltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardEndAltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardFrame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFrame
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardFrame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFrame
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_backwardFrameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFrameFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_backwardFrameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.backwardFrameFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardFrame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFrame
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardFrame_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFrame
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forwardFrameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFrameFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forwardFrameFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forwardFrameFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_memories_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memories
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_memories_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memories
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_memoriesBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memoriesBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_memoriesBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memoriesBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_memoriesBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memoriesBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_memoriesBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memoriesBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shuffle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shuffle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shuffleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shuffleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shuffleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shuffleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shuffleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImageCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImageCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImageCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImageCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImageCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImageCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImageCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImageCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImage1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImage1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImage1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImage1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_repeatImage1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_repeatImage1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.repeatImage1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infinity_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinity
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infinity_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinity
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infinityCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinityCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infinityCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinityCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infinityCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinityCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infinityCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infinityCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sos_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sos
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sos_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sos
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sosCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sosCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sosCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sosCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sosCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sosCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sosCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sosCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_megaphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.megaphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_megaphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.megaphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_megaphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.megaphoneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_megaphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.megaphoneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speaker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speaker
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speaker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speaker
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerPlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerPlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerPlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerPlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerPlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerPlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerMinusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerMinusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerZzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerZzz
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerZzz_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerZzz
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerZzzFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerZzzFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerZzzFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerZzzFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_badgePlusRadiowavesRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.badgePlusRadiowavesRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_badgePlusRadiowavesRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.badgePlusRadiowavesRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_badgePlusRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.badgePlusRadiowavesForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_badgePlusRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.badgePlusRadiowavesForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNote
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNote
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNoteList_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteList
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNoteList_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteList
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicQuarternote3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicQuarternote3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicQuarternote3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicQuarternote3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicMic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicMic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicMicCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMicCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicMicCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMicCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicMicCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMicCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicMicCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicMicCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRectanglepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRectanglepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRectanglepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRectanglepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkGobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkGobackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkGobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkGobackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward5
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward5
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward5
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward5
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward10_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward10
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward10_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward10
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward10_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward10
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward10_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward10
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward15_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward15
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward15_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward15
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward15_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward15
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward15_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward15
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward30_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward30
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward30_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward30
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward30_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward30
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward30_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward30
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward45_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward45
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward45_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward45
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward45_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward45
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward45_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward45
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward60_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward60
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward60_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward60
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward60_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward60
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward60_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward60
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward75_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward75
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward75_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward75
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward75_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward75
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward75_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward75
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforward90_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward90
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforward90_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforward90
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackward90_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward90
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackward90_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackward90
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_goforwardPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforwardPlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_goforwardPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.goforwardPlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gobackwardMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackwardMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gobackwardMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gobackwardMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swift
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swift
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swiftdata_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swiftdata
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swiftdata_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swiftdata
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magnifyingglassCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglassCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magnifyingglassCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglassCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magnifyingglassCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglassCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magnifyingglassCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magnifyingglassCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndDownRightMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndDownRightMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndDownRightMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndDownRightMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparkleMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkleMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparkleMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparkleMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_loupe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.loupe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_loupe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.loupe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFillBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micFillBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micAndSignalMeter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micAndSignalMeter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micAndSignalMeter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micAndSignalMeter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_micAndSignalMeterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micAndSignalMeterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_micAndSignalMeterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.micAndSignalMeterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lineDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineDiagonal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lineDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineDiagonal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lineDiagonalArrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineDiagonalArrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lineDiagonalArrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineDiagonalArrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_righttriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_righttriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_righttriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_righttriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_righttriangleSplitDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleSplitDiagonal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_righttriangleSplitDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleSplitDiagonal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_righttriangleSplitDiagonalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleSplitDiagonalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_righttriangleSplitDiagonalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.righttriangleSplitDiagonalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropHalffull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropHalffull
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropHalffull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropHalffull
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swirlCircleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swirlCircleRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swirlCircleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swirlCircleRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swirlCircleRighthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swirlCircleRighthalfFilledInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swirlCircleRighthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swirlCircleRighthalfFilledInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfFilledRighthalfStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledRighthalfStripedHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfFilledRighthalfStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledRighthalfStripedHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfFilledRighthalfStripedHorizontalInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledRighthalfStripedHorizontalInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfFilledRighthalfStripedHorizontalInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledRighthalfStripedHorizontalInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfStripedHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfStripedHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfStripedHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfStripedHorizontalInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfStripedHorizontalInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfStripedHorizontalInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfStripedHorizontalInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDottedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDottedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDottedcircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedcircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDottedcircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedcircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBottomrighthalfCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomrighthalfCheckered
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBottomrighthalfCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomrighthalfCheckered
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightspectrumHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightspectrumHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightspectrumHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightspectrumHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeMinusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeMinusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeMinusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeXmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeXmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeQuestionmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeQuestionmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleLefthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleLefthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleLefthalfFilledInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleRighthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRighthalfFilledInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleRighthalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRighthalfFilledInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleTophalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleTophalfFilledInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleTophalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleTophalfFilledInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleBottomhalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomhalfFilledInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleBottomhalfFilledInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleBottomhalfFilledInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smallcircleFilledCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleFilledCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smallcircleFilledCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleFilledCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smallcircleFilledCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleFilledCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smallcircleFilledCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleFilledCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smallcircleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smallcircleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smallcircleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smallcircleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smallcircleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_target_returnsImage() {
        // Arrange
        let string = String.SFSymbols.target
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_target_returnsImage() {
        // Arrange
        let string = String.SFSymbols.target
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDashedInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashedInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDashedInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashedInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circlebadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circlebadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circlebadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circlebadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circlebadge2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circlebadge2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circlebadge2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circlebadge2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlebadge2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x1LeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1LeftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x1LeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1LeftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x1RightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1RightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x1RightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x1RightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid3x3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid3x3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGrid3x3circleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3circleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGrid3x3circleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGrid3x3circleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagonpath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagonpath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagonpath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagonpath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagonpathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagonpathFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagonpathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagonpathFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagongrid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongrid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagongrid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongrid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagongridFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagongridFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagongridCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagongridCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleHexagongridcircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridcircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleHexagongridcircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleHexagongridcircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_placeholdertextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.placeholdertextFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_placeholdertextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.placeholdertextFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit1x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit1x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplit2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplit2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplit2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitDiagonal2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitDiagonal2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitDiagonal2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitDiagonal2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitDiagonal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitDiagonalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitDiagonalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitDiagonalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTopthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTopthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBottomthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBottomthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLeftthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLeftthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareRightthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareRightthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLeadingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareLeadingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTrailingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTrailingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareDashedInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDashedInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareDashedInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareDashedInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquareDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkSquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquareDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFillOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillOnsquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFillOnsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillOnsquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnsquareBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnsquareBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnsquareBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareBadgePersonCropFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnsquareBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareBadgePersonCropFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFilledOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFilledOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFilledOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFilledOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparklesSquareFilledOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesSquareFilledOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparklesSquareFilledOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesSquareFilledOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnsquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnsquareDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnsquareIntersectionDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareIntersectionDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnsquareIntersectionDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareIntersectionDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusSquareFillOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareFillOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusSquareFillOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareFillOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFillOnCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillOnCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFillOnCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillOnCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hSquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hSquareOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3TopleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3TopleftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3TopleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3TopleftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3TopmiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3TopmiddleFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3TopmiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3TopmiddleFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3ToprightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3ToprightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3ToprightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3ToprightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3MiddleleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddleleftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3MiddleleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddleleftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3MiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddleFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3MiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddleFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3MiddlerightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddlerightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3MiddlerightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3MiddlerightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3BottomleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottomleftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3BottomleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottomleftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3BottommiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottommiddleFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3BottommiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottommiddleFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3BottomrightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottomrightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3BottomrightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3BottomrightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x1BelowLineGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1BelowLineGrid1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x1BelowLineGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1BelowLineGrid1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x1BelowLineGrid1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1BelowLineGrid1x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x1BelowLineGrid1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x1BelowLineGrid1x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid4x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid4x3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid4x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid4x3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotSquareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotSquareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotSquareshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotSquareshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeDottedSquareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeDottedSquareshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeDottedSquareshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeDottedSquareshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapesquareshapeDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapesquareshapeDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapesquareshapeDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapesquareshapeDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_app_returnsImage() {
        // Arrange
        let string = String.SFSymbols.app
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_app_returnsImage() {
        // Arrange
        let string = String.SFSymbols.app
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appBadgeCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkAppDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkAppDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkAppDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkAppDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockAppDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockAppDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockAppDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockAppDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appclip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appclip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appclip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appGift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appGift
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appGift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appGift
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appGiftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appGiftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appGiftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appGiftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLeadinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLeadinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTrailinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTrailinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x1SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1SlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x1SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x1SlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit1x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit1x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit3x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit3x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit3x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit3x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tablecells_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecells
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tablecells_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecells
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tablecellsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tablecellsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tablecellsBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tablecellsBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tablecellsFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsFillBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tablecellsFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tablecellsFillBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleSplit3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleSplit3x3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleSplit3x3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTophalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTophalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTophalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTophalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBottomhalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomhalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBottomhalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomhalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLefthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLefthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRighthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRighthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLeadinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLeadinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTrailinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTrailinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLefthalfInsetFilledArrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfInsetFilledArrowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLefthalfInsetFilledArrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLefthalfInsetFilledArrowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRighthalfInsetFilledArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfInsetFilledArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRighthalfInsetFilledArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRighthalfInsetFilledArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLeadinghalfInsetFilledArrowLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfInsetFilledArrowLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLeadinghalfInsetFilledArrowLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadinghalfInsetFilledArrowLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTrailinghalfInsetFilledArrowTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfInsetFilledArrowTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTrailinghalfInsetFilledArrowTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailinghalfInsetFilledArrowTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTopthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTopthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBottomthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeftthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeftthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRightthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRightthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLeadingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleTrailingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleCenterInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCenterInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleCenterInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCenterInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleCenterInsetFilledBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCenterInsetFilledBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleCenterInsetFilledBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCenterInsetFilledBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetTopleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetTopleftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetTopleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetTopleftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetToprightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetToprightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetToprightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetToprightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetTopleadingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetTopleadingFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetTopleadingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetTopleadingFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetToptrailingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetToptrailingFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetToptrailingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetToptrailingFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetBottomleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomleftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetBottomleftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomleftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetBottomrightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomrightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetBottomrightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomrightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetBottomleadingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomleadingFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetBottomleadingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomleadingFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetBottomtrailingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomtrailingFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetBottomtrailingFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetBottomtrailingFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appwindowSwipeRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appwindowSwipeRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appwindowSwipeRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appwindowSwipeRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftToprightRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftToprightRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftToprightRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftToprightRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftToprightRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftToprightRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftToprightRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftToprightRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardToptrailingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardToptrailingRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardToptrailingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardToptrailingRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardToptrailingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardToptrailingRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardToptrailingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardToptrailingRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftBottomrightRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftBottomrightRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftBottomrightRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftBottomrightRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftBottomrightRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftBottomrightRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftBottomrightRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftBottomrightRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardBottomtrailingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardBottomtrailingRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardBottomtrailingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardBottomtrailingRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardBottomtrailingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardBottomtrailingRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardBottomtrailingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardBottomtrailingRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightBottomleftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightBottomleftRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightBottomleftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightBottomleftRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightBottomleftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightBottomleftRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightBottomleftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightBottomleftRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardBottomleadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardBottomleadingRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardBottomleadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardBottomleadingRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardBottomleadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardBottomleadingRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardBottomleadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardBottomleadingRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightTopleftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightTopleftRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightTopleftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightTopleftRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightTopleftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightTopleftRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightTopleftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightTopleftRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardTopleadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardTopleadingRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardTopleadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardTopleadingRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardTopleadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardTopleadingRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardTopleadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardTopleadingRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillOnrectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillOnrectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillOnrectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillOnrectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleInsetFilledOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleInsetFilledOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleInsetFilledOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangleOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangleOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangleOnRectangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangleOnRectangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playRectangleOnRectangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playRectangleOnRectangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playRectangleOnRectangleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangleFillOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleFillOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangleFillOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleFillOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle3Group_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3Group
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle3Group_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3Group
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle3GroupFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle3GroupFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid2x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid2x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid2x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid3x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid3x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid3x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid3x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid3x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid3x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid3x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid3x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleGrid1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid1x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleGrid1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleGrid1x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTophalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTophalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTophalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTophalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomhalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomhalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomhalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomhalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitLefthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLefthalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitLefthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLefthalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitRighthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRighthalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitRighthalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRighthalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitLeadinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeadinghalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitLeadinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeadinghalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTrailinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTrailinghalfInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTrailinghalfInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTrailinghalfInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTopthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeftthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitLeftthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeftthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRightthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitRightthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRightthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeadingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitLeadingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitLeadingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTrailingthirdInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTrailingthirdInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTrailingthirdInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitCenterInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitCenterInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitCenterInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitCenterInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTopleftInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopleftInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTopleftInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopleftInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitToprightInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitToprightInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitToprightInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitToprightInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitTopleadingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopleadingInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitTopleadingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitTopleadingInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitToptrailingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitToptrailingInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitToptrailingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitToptrailingInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomleftInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomleftInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomleftInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomleftInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomrightInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomrightInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomrightInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomrightInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomleadingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomleadingInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomleadingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomleadingInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBottomtrailingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomtrailingInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBottomtrailingInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBottomtrailingInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitAngledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitAngledFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitOnrectanglePortraitAngledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitOnrectanglePortraitAngledFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSplit2x1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSplit2x1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSplit2x1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitSplit2x1SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1SlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitSplit2x1SlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitSplit2x1SlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsule_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsule
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsule_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsule
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsuleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsuleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsuleInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_capsulePortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_capsulePortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.capsulePortraitInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oval_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oval
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oval_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oval
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovalPortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovalPortraitInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovalPortraitInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkTriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkTriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diamondInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diamondInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diamondInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_octagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_octagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.octagonBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hexagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hexagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hexagonBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagonLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagonRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagonTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pentagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pentagonBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pentagonBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_seal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.seal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_seal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.seal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sealFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sealFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkSeal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSeal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkSeal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSeal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkSealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSealFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkSealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSealFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkSeal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSeal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkSeal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSeal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkSealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSealFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkSealFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSealFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHeart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHeart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHeartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHeartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpHeart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpHeart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpHeartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpHeartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownHeart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownHeart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownHeartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownHeartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseHeart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseHeart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseHeartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseHeartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fleuron_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fleuron
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fleuron_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fleuron
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fleuronFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fleuronFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fleuronFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fleuronFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitHeart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitHeart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitHeart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitHeartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitHeartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitHeartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitClub_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitClub
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitClub_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitClub
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitClubFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitClubFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitClubFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitClubFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitSpade_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitSpade
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitSpade_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitSpade
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitSpadeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitSpadeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitSpadeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitSpadeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_star_returnsImage() {
        // Arrange
        let string = String.SFSymbols.star
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_star_returnsImage() {
        // Arrange
        let string = String.SFSymbols.star
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starLeadinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starLeadinghalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starLeadinghalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starLeadinghalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lineHorizontalStarFilllineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineHorizontalStarFilllineHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lineHorizontalStarFilllineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineHorizontalStarFilllineHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rhombus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rhombus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rhombus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rhombus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rhombusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rhombusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rhombusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rhombusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldLefthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldLefthalfFilledBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldLefthalfFilledBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldLefthalfFilledTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldLefthalfFilledTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldRighthalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldRighthalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldRighthalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldLefthalfFilledSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldLefthalfFilledSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldLefthalfFilledSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shieldCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldCheckered
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shieldCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shieldCheckered
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflifeShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflifeShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflifeShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflifeShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_firewall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.firewall
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_firewall_returnsImage() {
        // Arrange
        let string = String.SFSymbols.firewall
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_firewallFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.firewallFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_firewallFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.firewallFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagBadgeEllipsisFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagBadgeEllipsisFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckered
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCheckered_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckered
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCheckeredCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckeredCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCheckeredCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckeredCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCheckeredCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckeredCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCheckeredCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckeredCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flag2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2Crossed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flag2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2Crossed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flag2CrossedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flag2CrossedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flag2CrossedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flag2CrossedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flag2CrossedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flag2CrossedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flag2CrossedCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagFilledAndflagCrossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagFilledAndflagCrossed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagFilledAndflagCrossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagFilledAndflagCrossed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagAndflagFilledCrossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagAndflagFilledCrossed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagAndflagFilledCrossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagAndflagFilledCrossed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flagCheckered2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckered2Crossed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flagCheckered2Crossed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flagCheckered2Crossed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_location_returnsImage() {
        // Arrange
        let string = String.SFSymbols.location
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_location_returnsImage() {
        // Arrange
        let string = String.SFSymbols.location
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorth_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorth
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorth_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorth
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorthFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorthFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorthCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorthCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorthCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorthCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorthLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorthLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationNorthLineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthLineFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationNorthLineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationNorthLineFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bell
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bell
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeWaveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeWaveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeWaveformFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeWaveformFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellBadgeSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellBadgeSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellBadgeSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellAndWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellAndWavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellAndWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellAndWavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bellAndWavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellAndWavesLeftAndRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bellAndWavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bellAndWavesLeftAndRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tagSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tagSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tagSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bolt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bolt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeAutomatic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeAutomatic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeAutomaticFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeAutomaticFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeXmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBadgeXmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltRingClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltRingClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltRingClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltRingClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linkIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linkIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linkIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontalIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontalIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltHorizontalIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltHorizontalIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltHorizontalIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathIcloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathIcloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathIcloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathIcloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathIcloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathIcloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudAndArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_icloudAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_icloudAndArrowUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.icloudAndArrowUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xSquareroot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquareroot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xSquareroot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquareroot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOffFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOffFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOffCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOffCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOffCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOffCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOffCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOnFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOnFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOnCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOnCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightOnCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightOnCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightOnCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flashlightSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flashlightSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flashlightSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_camera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.camera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_camera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.camera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraShutterButton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraShutterButton
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraShutterButton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraShutterButton
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraShutterButtonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraShutterButtonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraShutterButtonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraShutterButtonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeEllipsisFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraBadgeEllipsisFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraBadgeEllipsisFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCamera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCamera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCameraFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCameraFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_message_returnsImage() {
        // Arrange
        let string = String.SFSymbols.message
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_message_returnsImage() {
        // Arrange
        let string = String.SFSymbols.message
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeFilledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeFilledFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeFilledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeFilledFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeWaveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeWaveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_messageBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeWaveformFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_messageBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.messageBadgeWaveformFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkMessage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkMessage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkMessageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkMessageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpMessage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpMessage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpMessageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpMessageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownMessage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownMessage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownMessageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownMessageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMessage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMessage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMessageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusMessageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisMessage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisMessage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisMessage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisMessageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisMessageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisMessageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkBubbleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkBubbleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkBubbleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkBubbleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBubbleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_quoteOpening_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteOpening
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_quoteOpening_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteOpening
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_quoteClosing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteClosing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_quoteClosing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteClosing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_quoteBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_quoteBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_quoteBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_quoteBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quoteBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_starBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_starBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.starBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_captionsBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.captionsBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_captionsBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.captionsBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_captionsBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.captionsBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_captionsBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.captionsBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle3GroupBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle3GroupBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle3GroupBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle3GroupBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle3GroupBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisVerticalBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisVerticalBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisVerticalBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisVerticalBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisVerticalBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisVerticalBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisVerticalBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisVerticalBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2Bubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Bubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2Bubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2Bubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_speakerWave2BubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2BubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_speakerWave2BubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.speakerWave2BubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBubble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBubble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBubble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBubbleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personBubbleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personBubbleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleMiddleBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleBottom
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleMiddleBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleBottom
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleMiddleBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleBottomFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleMiddleBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleBottomFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleMiddleTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleTop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleMiddleTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleTop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleMiddleTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleTopFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleMiddleTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleMiddleTopFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndbubbleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndbubbleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndbubbleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndbubbleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndExclamationmarkbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndExclamationmarkbubbleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndExclamationmarkbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndExclamationmarkbubbleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndExclamationmarkbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndExclamationmarkbubbleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndExclamationmarkbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndExclamationmarkbubbleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndTextbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndTextbubbleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndTextbubbleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndTextbubbleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubbleLeftAndTextbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndTextbubbleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubbleLeftAndTextbubbleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubbleLeftAndTextbubbleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFillBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneFillBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneConnection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneConnection
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneConnection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneConnection
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneConnectionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneConnectionFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneConnectionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneConnectionFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeWaveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeWaveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeWaveformFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneBadgeWaveformFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowUpRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowUpRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowDownLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowDownLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowDownLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowDownLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneArrowRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneArrowRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneArrowRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_phoneDownWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownWavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_phoneDownWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.phoneDownWavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletype_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletype
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletype_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletype
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletypeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletypeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletypeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletypeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletypeAnswer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletypeAnswer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletypeAnswerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletypeAnswerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teletypeAnswerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teletypeAnswerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teletypeAnswerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_video_returnsImage() {
        // Arrange
        let string = String.SFSymbols.video
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_video_returnsImage() {
        // Arrange
        let string = String.SFSymbols.video
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoFillBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoFillBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeWaveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeWaveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeWaveformFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoBadgeWaveformFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoBadgeWaveformFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightVideo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightVideo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightVideoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightVideoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftVideo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftVideo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftVideoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftVideoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkVideo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkVideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkVideo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkVideoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkVideoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkVideoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deskview_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskview
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deskview_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskview
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deskviewFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskviewFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deskviewFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskviewFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fieldOfViewUltrawide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewUltrawide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fieldOfViewUltrawide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewUltrawide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fieldOfViewUltrawideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewUltrawideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fieldOfViewUltrawideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewUltrawideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fieldOfViewWide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewWide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fieldOfViewWide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewWide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fieldOfViewWideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewWideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fieldOfViewWideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fieldOfViewWideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeArrowTriangleBranch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeArrowTriangleBranch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeArrowTriangleBranch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeArrowTriangleBranch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeArrowTriangleBranchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeArrowTriangleBranchFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeArrowTriangleBranchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeArrowTriangleBranchFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeOpenBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpenBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeOpenBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeOpenBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgePersonCropFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgePersonCropFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadgeShieldHalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeShieldHalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadgeShieldHalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeShieldHalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_envelopeBadgeShieldHalfFilledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeShieldHalfFilledFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_envelopeBadgeShieldHalfFilledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.envelopeBadgeShieldHalfFilledFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mailStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mailStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mailStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mailStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mail
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mail
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mailAndTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailAndTextMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mailAndTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mailAndTextMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndTextMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndTextMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndTextMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshapeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshapeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshapeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshapeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshape2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshape2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshape2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshape2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshape2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signature_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signature
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signature_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signature
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3CrossedSwirlCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3CrossedSwirlCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3CrossedSwirlCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3CrossedSwirlCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3CrossedSwirlCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3CrossedSwirlCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3CrossedSwirlCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3CrossedSwirlCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scissors_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissors
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scissors_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissors
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scissorsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scissorsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scissorsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scissorsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scissorsBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scissorsBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scissorsBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bagFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bagFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bagFillBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cartFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cartFillBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cartFillBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basket
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basket
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_basketFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_basketFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.basketFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardAnd123_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardAnd123
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardAnd123_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardAnd123
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_giftcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_giftcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_giftcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_giftcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_walletPass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.walletPass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_walletPass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.walletPass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_walletPassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.walletPassFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_walletPassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.walletPassFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wandAndRays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndRays
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wandAndRays_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndRays
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wandAndRaysInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndRaysInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wandAndRaysInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndRaysInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wandAndStars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndStars
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wandAndStars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndStars
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wandAndStarsInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndStarsInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wandAndStarsInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wandAndStarsInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cropRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cropRotate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cropRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cropRotate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRotate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitRotate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleLandscapeRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLandscapeRotate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleLandscapeRotate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleLandscapeRotate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialLow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialLow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialLow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialLowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialLowFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialLowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialLowFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialMedium
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialMedium_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialMedium
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialMediumFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialMediumFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialMediumFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialMediumFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialHigh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialHigh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialHigh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dialHighFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialHighFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dialHighFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dialHighFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gyroscope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gyroscope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gyroscope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gyroscope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nosignApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosignApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nosignApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosignApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nosignAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosignAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nosignAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nosignAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom0percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom0percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percentBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percentBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percentBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percentBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percentBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percentBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom50percentBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom50percentBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom100percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedleBottom100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedleBottom100percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedle0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle0percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedle0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle0percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedle33percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle33percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedle33percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle33percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedle50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle50percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedle50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle50percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedle67percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle67percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedle67percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle67percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithDotsNeedle100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle100percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithDotsNeedle100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithDotsNeedle100percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_barometer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barometer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_barometer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barometer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_metronome_returnsImage() {
        // Arrange
        let string = String.SFSymbols.metronome
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_metronome_returnsImage() {
        // Arrange
        let string = String.SFSymbols.metronome
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_metronomeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.metronomeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_metronomeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.metronomeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_amplifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.amplifier
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_amplifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.amplifier
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dice_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dice
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dice_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dice
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_diceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diceFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_diceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.diceFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace4
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace4
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace4Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace4Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace5
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace5_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace5
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace5Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace5Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace5Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace5Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace6_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace6
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace6_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace6
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dieFace6Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace6Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dieFace6Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dieFace6Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareGrid3x3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareGrid3x3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareGrid3x3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pianokeys_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pianokeys
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pianokeys_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pianokeys
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pianokeysInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pianokeysInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pianokeysInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pianokeysInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tuningfork_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tuningfork
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tuningfork_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tuningfork
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintbrush_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrush
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintbrush_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrush
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintbrushFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintbrushFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintbrushPointed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushPointed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintbrushPointed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushPointed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintbrushPointedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushPointedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintbrushPointedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintbrushPointedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_level_returnsImage() {
        // Arrange
        let string = String.SFSymbols.level
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_level_returnsImage() {
        // Arrange
        let string = String.SFSymbols.level
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_levelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.levelFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_levelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.levelFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linesMeasurementHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linesMeasurementHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linesMeasurementHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linesMeasurementHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_linesMeasurementVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linesMeasurementVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_linesMeasurementVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.linesMeasurementVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrenchAdjustable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAdjustable
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrenchAdjustable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAdjustable
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrenchAdjustableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAdjustableFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrenchAdjustableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAdjustableFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hammer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hammer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hammerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hammerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hammerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hammerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hammerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hammerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hammerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_screwdriver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.screwdriver
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_screwdriver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.screwdriver
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_screwdriverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.screwdriverFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_screwdriverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.screwdriverFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyedropper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyedropper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyedropperHalffull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropperHalffull
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyedropperHalffull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropperHalffull
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyedropperFull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropperFull
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyedropperFull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyedropperFull
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrenchAndScrewdriver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAndScrewdriver
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrenchAndScrewdriver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAndScrewdriver
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrenchAndScrewdriverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAndScrewdriverFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrenchAndScrewdriverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrenchAndScrewdriverFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applescript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applescript
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applescript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applescript
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applescriptFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applescriptFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applescriptFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applescriptFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scroll_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scroll
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scroll_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scroll
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scrollFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scrollFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scrollFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scrollFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stethoscope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stethoscope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stethoscopeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscopeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stethoscopeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscopeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stethoscopeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscopeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stethoscopeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stethoscopeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printerFilledAndPaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerFilledAndPaper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printerFilledAndPaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerFilledAndPaper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printerDotmatrix_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrix
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printerDotmatrix_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrix
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printerDotmatrixFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrixFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printerDotmatrixFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrixFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_printerDotmatrixFilledAndPaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrixFilledAndPaper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_printerDotmatrixFilledAndPaper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.printerDotmatrixFilledAndPaper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scanner_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scanner
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scanner_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scanner
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scannerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scannerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scannerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scannerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faxmachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faxmachine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faxmachine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faxmachine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faxmachineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faxmachineFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faxmachineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faxmachineFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handbag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handbag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handbagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handbagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handbagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handbagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handbagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handbagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handbagCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_briefcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_briefcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_briefcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_briefcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_briefcaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_briefcaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_briefcaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_briefcaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.briefcaseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_caseImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.caseImage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_caseImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.caseImage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_caseImageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.caseImageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_caseImageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.caseImageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_latch2Case_returnsImage() {
        // Arrange
        let string = String.SFSymbols.latch2Case
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_latch2Case_returnsImage() {
        // Arrange
        let string = String.SFSymbols.latch2Case
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_latch2CaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.latch2CaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_latch2CaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.latch2CaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCaseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcaseCart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseCart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcaseCart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseCart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcaseCartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseCartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcaseCartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseCartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcaseRolling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseRolling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcaseRolling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseRolling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suitcaseRollingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseRollingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suitcaseRollingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suitcaseRollingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermasks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasks
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermasks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasks
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermasksFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermasksFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermasksCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermasksCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermasksCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermasksCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermasksCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermaskAndPaintbrush_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermaskAndPaintbrush
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermaskAndPaintbrush_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermaskAndPaintbrush
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_theatermaskAndPaintbrushFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermaskAndPaintbrushFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_theatermaskAndPaintbrushFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.theatermaskAndPaintbrushFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_puzzlepieceExtension_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceExtension
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_puzzlepieceExtension_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceExtension
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_puzzlepieceExtensionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceExtensionFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_puzzlepieceExtensionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceExtensionFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_puzzlepiece_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepiece
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_puzzlepiece_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepiece
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_puzzlepieceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_puzzlepieceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.puzzlepieceFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homekit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homekit
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homekit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homekit
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_house_returnsImage() {
        // Arrange
        let string = String.SFSymbols.house
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_house_returnsImage() {
        // Arrange
        let string = String.SFSymbols.house
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNoteHouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteHouse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNoteHouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteHouse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNoteHouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteHouseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNoteHouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteHouseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playHouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playHouse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playHouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playHouse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playHouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playHouseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playHouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playHouseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_storefront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefront
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_storefront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefront
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_storefrontFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_storefrontFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_storefrontCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_storefrontCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_storefrontCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_storefrontCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.storefrontCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buildingColumns_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumns
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buildingColumns_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumns
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buildingColumnsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buildingColumnsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buildingColumnsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buildingColumnsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buildingColumnsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buildingColumnsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingColumnsCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulb_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulb_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMaxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMaxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMinBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMinBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbMinBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbMinBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbMinBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulb2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulb2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulb2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulb2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulb2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbLed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbLed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbLedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbLedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbLedWide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedWide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbLedWide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedWide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightbulbLedWideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedWideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightbulbLedWideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightbulbLedWideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanOscillation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanOscillation
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanOscillation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanOscillation
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanOscillationFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanOscillationFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanOscillationFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanOscillationFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanBadgeAutomatic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanBadgeAutomatic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanBadgeAutomaticFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanBadgeAutomaticFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanDesk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanDesk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanDeskFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanDeskFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanFloor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFloor
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanFloor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFloor
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanFloorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFloorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanFloorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanFloorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanCeiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanCeiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanCeilingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanCeilingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanAndLightCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanAndLightCeiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanAndLightCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanAndLightCeiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fanAndLightCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanAndLightCeilingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fanAndLightCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fanAndLightCeilingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampDesk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampDesk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampDeskFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampDeskFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampTable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampTable
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampTable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampTable
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampTableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampTableFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampTableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampTableFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampFloor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampFloor
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampFloor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampFloor
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampFloorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampFloorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampFloorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampFloorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeilingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeilingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lampCeilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeilingInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lampCeilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lampCeilingInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessedInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessedInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessedInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessedInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessed3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessed3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessed3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessed3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRecessed3Inverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3Inverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRecessed3Inverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRecessed3Inverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightPanel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightPanel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightPanel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightPanel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightPanelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightPanelFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightPanelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightPanelFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightCylindricalCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightCylindricalCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightCylindricalCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeilingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightCylindricalCeilingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeilingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightCylindricalCeilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeilingInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightCylindricalCeilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightCylindricalCeilingInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightStrip2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightStrip2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightStrip2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightStrip2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightStrip2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightStrip2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightStrip2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightStrip2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRibbon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRibbon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRibbon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRibbon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightRibbonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRibbonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightRibbonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightRibbonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chandelier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chandelier
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chandelier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chandelier
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chandelierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chandelierFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chandelierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chandelierFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOnFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOnFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOnSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOnSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOff
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOff
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOffFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOffFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOffSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOffSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightswitchOffSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightswitchOffSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightswitchOffSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonProgrammable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammable
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonProgrammable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammable
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonProgrammableSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammableSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonProgrammableSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammableSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonProgrammableSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammableSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonProgrammableSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonProgrammableSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_switchProgrammable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammable
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_switchProgrammable_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammable
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_switchProgrammableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_switchProgrammableFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_switchProgrammableSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_switchProgrammableSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_switchProgrammableSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_switchProgrammableSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switchProgrammableSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeA_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeA
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeA_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeA
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeAFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeAFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeAFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeAFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeASquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeASquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeASquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeASquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeASquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeASquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeASquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeASquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeB_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeB
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeB_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeB
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeBFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeBFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeBSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeBSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeBSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeBSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeBSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeC_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeC
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeC_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeC
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeCFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeCFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeCSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeCSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeCSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeCSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeCSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeD_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeD
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeD_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeD
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeDFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeDFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeDSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeDSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeDSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeDSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeDSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeE_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeE
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeE_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeE
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeEFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeEFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeEFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeEFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeESquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeESquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeESquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeESquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeESquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeESquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeESquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeESquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeF_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeF
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeF_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeF
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeFFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeFFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeFSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeFSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeFSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeFSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeFSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeG_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeG
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeG_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeG
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeGFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeGFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeGSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeGSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeGSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeGSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeGSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeH_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeH
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeH_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeH
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeHFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeHFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeHSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeHSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeHSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeHSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeHSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeI_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeI
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeI_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeI
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeIFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeIFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeIFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeIFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeISquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeISquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeISquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeISquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeISquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeISquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeISquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeISquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeJ_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJ
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeJ_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJ
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeJFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeJFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeJSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeJSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeJSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeJSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeJSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeK_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeK
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeK_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeK
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeKFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeKFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeKSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeKSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeKSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeKSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeKSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeL_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeL
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeL_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeL
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeLFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeLFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeLSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeLSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeLSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeLSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeLSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeM_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeM
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeM_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeM
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeMFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeMFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeMSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeMSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeMSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeMSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeMSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeN_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeN
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeN_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeN
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeNFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeNFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeNSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeNSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeNSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeNSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeNSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeO_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeO
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeO_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeO
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeOFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeOFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeOSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeOSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletTypeOSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletTypeOSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletTypeOSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletStrip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletStrip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletStrip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletStrip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_poweroutletStripFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletStripFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_poweroutletStripFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.poweroutletStripFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powerplug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerplug
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powerplug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerplug
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powerplugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerplugFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powerplugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powerplugFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powercord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powercord
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powercord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powercord
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_powercordFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powercordFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_powercordFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.powercordFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightBeaconMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightBeaconMin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightBeaconMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightBeaconMinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightBeaconMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightBeaconMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightBeaconMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMaxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightBeaconMaxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightBeaconMaxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_webCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.webCamera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_webCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.webCamera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_webCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.webCameraFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_webCameraFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.webCameraFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoDoorbell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoDoorbell
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoDoorbell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoDoorbell
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoDoorbellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoDoorbellFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoDoorbellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoDoorbellFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_entryLeverKeypad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_entryLeverKeypad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_entryLeverKeypadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_entryLeverKeypadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_entryLeverKeypadTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_entryLeverKeypadTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_entryLeverKeypadTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_entryLeverKeypadTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.entryLeverKeypadTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorLeftHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorLeftHandOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorLeftHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorLeftHandOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorLeftHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorLeftHandClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorLeftHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorLeftHandClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorRightHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorRightHandOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorRightHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorRightHandOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorRightHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorRightHandClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorRightHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorRightHandClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorSlidingLeftHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingLeftHandOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorSlidingLeftHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingLeftHandOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorSlidingLeftHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingLeftHandClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorSlidingLeftHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingLeftHandClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorSlidingRightHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingRightHandOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorSlidingRightHandOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingRightHandOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorSlidingRightHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingRightHandClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorSlidingRightHandClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorSlidingRightHandClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageOpenTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageOpenTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageClosedTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageClosedTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageClosedTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageClosedTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageDoubleBayOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageDoubleBayOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageDoubleBayClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageDoubleBayClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageDoubleBayOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayOpenTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageDoubleBayOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayOpenTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorGarageDoubleBayClosedTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayClosedTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorGarageDoubleBayClosedTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorGarageDoubleBayClosedTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorFrenchOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorFrenchOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorFrenchOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorFrenchOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_doorFrenchClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorFrenchClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_doorFrenchClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.doorFrenchClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedestrianGateClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedestrianGateClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedestrianGateClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedestrianGateClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedestrianGateOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedestrianGateOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedestrianGateOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedestrianGateOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowVerticalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowVerticalOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowVerticalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowVerticalOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowVerticalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowVerticalClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowVerticalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowVerticalClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowHorizontalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowHorizontalClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowHorizontalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowHorizontalClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCeiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowCeiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCeiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowCeilingClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCeilingClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowCeilingClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCeilingClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowCasement_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCasement
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowCasement_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCasement
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowCasementClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCasementClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowCasementClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowCasementClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowAwning_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowAwning
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowAwning_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowAwning
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowAwningClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowAwningClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowAwningClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowAwningClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_blindsVerticalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsVerticalOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_blindsVerticalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsVerticalOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_blindsVerticalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsVerticalClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_blindsVerticalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsVerticalClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_blindsHorizontalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsHorizontalOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_blindsHorizontalOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsHorizontalOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_blindsHorizontalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsHorizontalClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_blindsHorizontalClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.blindsHorizontalClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowShadeOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowShadeOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windowShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowShadeClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windowShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windowShadeClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rollerShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rollerShadeOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rollerShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rollerShadeOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rollerShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rollerShadeClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rollerShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rollerShadeClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_romanShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.romanShadeOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_romanShadeOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.romanShadeOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_romanShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.romanShadeClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_romanShadeClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.romanShadeClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_curtainsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curtainsOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_curtainsOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curtainsOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_curtainsClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curtainsClosed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_curtainsClosed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curtainsClosed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airPurifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airPurifier
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airPurifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airPurifier
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airPurifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airPurifierFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airPurifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airPurifierFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dehumidifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dehumidifier
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dehumidifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dehumidifier
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dehumidifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dehumidifierFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dehumidifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dehumidifierFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifier
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidifier_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifier
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidifierFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidifierAndDroplets_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierAndDroplets
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidifierAndDroplets_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierAndDroplets
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_humidifierAndDropletsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierAndDropletsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_humidifierAndDropletsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.humidifierAndDropletsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heaterVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heaterVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heaterVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heaterVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heaterVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heaterVerticalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heaterVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heaterVerticalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airConditionerVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airConditionerVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airConditionerVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerVerticalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airConditionerVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerVerticalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airConditionerHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airConditionerHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airConditionerHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airConditionerHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airConditionerHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sprinkler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinkler
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sprinkler_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinkler
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sprinklerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sprinklerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sprinklerAndDroplets_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerAndDroplets
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sprinklerAndDroplets_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerAndDroplets
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sprinklerAndDropletsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerAndDropletsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sprinklerAndDropletsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sprinklerAndDropletsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_spigot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.spigot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_spigot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.spigot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_spigotFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.spigotFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_spigotFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.spigotFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropKeypadRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropKeypadRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropKeypadRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropKeypadRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropKeypadRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropKeypadRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropKeypadRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropKeypadRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_showerSidejet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerSidejet
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_showerSidejet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerSidejet
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_showerSidejetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerSidejetFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_showerSidejetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerSidejetFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_showerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_showerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_showerHandheld_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerHandheld
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_showerHandheld_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerHandheld
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_showerHandheldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerHandheldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_showerHandheldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.showerHandheldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bathtub_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bathtub
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bathtub_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bathtub
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bathtubFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bathtubFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bathtubFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bathtubFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_contactSensor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contactSensor
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_contactSensor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contactSensor
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_contactSensorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contactSensorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_contactSensorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.contactSensorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sensor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensor
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sensor_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensor
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sensorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sensorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carbonMonoxideCloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonMonoxideCloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carbonMonoxideCloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonMonoxideCloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carbonMonoxideCloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonMonoxideCloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carbonMonoxideCloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonMonoxideCloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carbonDioxideCloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonDioxideCloud
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carbonDioxideCloud_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonDioxideCloud
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carbonDioxideCloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonDioxideCloudFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carbonDioxideCloudFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carbonDioxideCloudFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipeAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipeAndDrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipeAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipeAndDrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipeAndDropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipeAndDropFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipeAndDropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipeAndDropFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifireceiver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifireceiver
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifireceiver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifireceiver
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifireceiverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifireceiverFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifireceiverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifireceiverFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoprojector_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoprojector
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoprojector_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoprojector
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_videoprojectorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoprojectorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_videoprojectorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.videoprojectorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiRouter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiRouter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiRouter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiRouter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiRouterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiRouterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiRouterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiRouterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_partyPopper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.partyPopper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_partyPopper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.partyPopper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_partyPopperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.partyPopperFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_partyPopperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.partyPopperFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_balloon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_balloon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_balloonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_balloonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_balloon2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_balloon2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_balloon2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_balloon2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.balloon2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laserBurst_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laserBurst
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laserBurst_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laserBurst
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fireworks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireworks
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fireworks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireworks
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fryingPan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fryingPan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fryingPan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fryingPan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fryingPanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fryingPanFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fryingPanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fryingPanFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_popcorn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcorn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_popcorn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcorn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_popcornFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_popcornFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_popcornCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_popcornCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_popcornCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_popcornCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.popcornCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bedDouble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDouble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bedDouble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDouble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bedDoubleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bedDoubleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bedDoubleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bedDoubleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bedDoubleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bedDoubleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bedDoubleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sofa_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sofa
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sofa_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sofa
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sofaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sofaFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sofaFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sofaFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chairLounge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairLounge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chairLounge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairLounge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chairLoungeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairLoungeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chairLoungeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairLoungeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chair_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chair
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chair_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chair
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chairFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chairFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chairFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tableFurniture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tableFurniture
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tableFurniture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tableFurniture
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tableFurnitureFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tableFurnitureFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tableFurnitureFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tableFurnitureFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cabinet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cabinet
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cabinet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cabinet
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cabinetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cabinetFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cabinetFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cabinetFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fireplace_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireplace
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fireplace_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireplace
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fireplaceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireplaceFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fireplaceFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fireplaceFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_washer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_washer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_washerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_washerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_washerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_washerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_washerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_washerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.washerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dryer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dryer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dryerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dryerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dryerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dryerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dryerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dryerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dryerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dishwasher_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasher
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dishwasher_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasher
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dishwasherFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dishwasherFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dishwasherCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dishwasherCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dishwasherCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dishwasherCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dishwasherCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oven_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oven
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oven_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oven
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ovenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ovenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ovenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stove_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stove
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stove_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stove
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stoveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stoveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stoveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stoveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cooktop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cooktop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cooktop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cooktop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cooktopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cooktopFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cooktopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cooktopFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microwave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microwave
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microwave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microwave
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microwaveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microwaveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microwaveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microwaveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_refrigerator_returnsImage() {
        // Arrange
        let string = String.SFSymbols.refrigerator
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_refrigerator_returnsImage() {
        // Arrange
        let string = String.SFSymbols.refrigerator
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_refrigeratorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.refrigeratorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_refrigeratorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.refrigeratorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sink_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sink
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sink_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sink
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sinkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sinkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sinkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sinkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_toilet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toilet
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_toilet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toilet
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_toiletFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_toiletFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_toiletCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_toiletCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_toiletCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_toiletCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.toiletCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stairs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stairs
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stairs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stairs
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tentCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tentCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tentCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tentCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tentCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tent2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tent2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tent2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tent2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tent2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tent2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tent2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tent2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tent2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseLodge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseLodge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseLodgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseLodgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseLodgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseLodgeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseLodgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseLodgeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseLodgeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseAndFlag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseAndFlag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseAndFlagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseAndFlagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseAndFlagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseAndFlagCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_houseAndFlagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_houseAndFlagCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.houseAndFlagCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightAndLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightAndLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightAndLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightAndLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightAndLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightAndLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostRightAndLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostRightAndLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostRightAndLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostAndArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostAndArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostAndArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostAndArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostAndArrowtriangleUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostAndArrowtriangleUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_signpostAndArrowtriangleUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_signpostAndArrowtriangleUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.signpostAndArrowtriangleUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mountain2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mountain2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mountain2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mountain2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mountain2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mountain2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mountain2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mountain2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mountain2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitBottomrightquarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitBottomrightquarter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitBottomrightquarter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitBottomrightquarter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareSplitBottomrightquarterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitBottomrightquarterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareSplitBottomrightquarterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareSplitBottomrightquarterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_building_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_building_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buildingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buildingFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buildingFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_building2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_building2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_building2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_building2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_building2CropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2CropCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_building2CropCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2CropCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_building2CropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2CropCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_building2CropCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.building2CropCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockCircleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircleDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockCircleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockCircleDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSquareStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSquareStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSquareStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangleOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRectangleOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRectangleOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRectangleOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkLockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkLockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockRotation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRotation
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockRotation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockRotation
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenRotation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenRotation
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenRotation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenRotation
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_key_returnsImage() {
        // Arrange
        let string = String.SFSymbols.key
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_key_returnsImage() {
        // Arrange
        let string = String.SFSymbols.key
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keySlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keySlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keySlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keySlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keySlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keySlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keySlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keySlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyRadiowavesForwardSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyRadiowavesForwardSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyRadiowavesForwardSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyRadiowavesForwardSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyRadiowavesForwardSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkKeyFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkKeyFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkKeyFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkKeyFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifi
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifi
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiExclamationmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiExclamationmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wifiExclamationmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wifiExclamationmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wifiExclamationmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pinSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pinSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pinSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappin
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappin_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappin
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinAndEllipse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinAndEllipse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinAndEllipseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinAndEllipseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mappinAndEllipseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mappinAndEllipseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mappinAndEllipseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_map_returnsImage() {
        // Arrange
        let string = String.SFSymbols.map
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_map_returnsImage() {
        // Arrange
        let string = String.SFSymbols.map
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mapCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mapCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mapCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mapCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mapCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_safari_returnsImage() {
        // Arrange
        let string = String.SFSymbols.safari
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_safari_returnsImage() {
        // Arrange
        let string = String.SFSymbols.safari
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_safariFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.safariFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_safariFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.safariFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_move3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.move3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_move3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.move3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scale3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scale3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scale3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scale3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotate3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotate3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotate3dFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotate3dFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotate3dCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotate3dCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotate3dCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotate3dCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotate3dCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_torus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.torus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_torus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.torus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotateLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotateLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotateLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotateLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotateRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotateRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rotateRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rotateRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rotateRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_selectionPinInOut_returnsImage() {
        // Arrange
        let string = String.SFSymbols.selectionPinInOut
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_selectionPinInOut_returnsImage() {
        // Arrange
        let string = String.SFSymbols.selectionPinInOut
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faceid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faceid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cpu_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cpu
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cpu_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cpu
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cpuFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cpuFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cpuFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cpuFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_memorychip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memorychip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_memorychip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memorychip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_memorychipFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memorychipFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_memorychipFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.memorychipFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticaldisc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldisc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticaldisc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldisc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticaldiscFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticaldiscFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticaldiscFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sensorTagRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorTagRadiowavesForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sensorTagRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorTagRadiowavesForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sensorTagRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorTagRadiowavesForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sensorTagRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sensorTagRadiowavesForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airtagRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagRadiowavesForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airtagRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagRadiowavesForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airtagRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagRadiowavesForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airtagRadiowavesForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagRadiowavesForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airtag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airtag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airtagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airtagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airtagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_display_returnsImage() {
        // Arrange
        let string = String.SFSymbols.display
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_display_returnsImage() {
        // Arrange
        let string = String.SFSymbols.display
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playDisplay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playDisplay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDisplay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDisplay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenDisplay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenDisplay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_displayAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.displayAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_displayAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.displayAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotScopeDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScopeDisplay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotScopeDisplay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScopeDisplay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_displayTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.displayTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_displayTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.displayTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_display2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.display2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_display2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.display2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_desktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_desktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playDesktopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playDesktopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDesktopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockDesktopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenDesktopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenDesktopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenDesktopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_desktopcomputerAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputerAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_desktopcomputerAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputerAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_desktopcomputerTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputerTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_desktopcomputerTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.desktopcomputerTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macproGen3Server_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3Server
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macproGen3Server_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macproGen3Server
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_serverRack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.serverRack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_serverRack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.serverRack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xserve_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xserve
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xserve_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xserve
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xserveRaid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xserveRaid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xserveRaid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xserveRaid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laptopcomputerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laptopcomputerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playLaptopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playLaptopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockLaptopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockLaptopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenLaptopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenLaptopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laptopcomputerAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laptopcomputerAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laptopcomputerTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laptopcomputerTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laptopcomputerTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotScopeLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScopeLaptopcomputer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotScopeLaptopcomputer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScopeLaptopcomputer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbookGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbookGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbookGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbookGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbook_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbook
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbook_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbook
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbookAndIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbookAndIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbookAndIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbookAndIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macmini
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macmini
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macminiFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macminiFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macstudio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macstudio
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macstudio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macstudio
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macstudioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macstudioFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macstudioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macstudioFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airportExpress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExpress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airportExpress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExpress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airportExtreme_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExtreme
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airportExtreme_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExtreme
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airportExtremeTower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExtremeTower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airportExtremeTower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airportExtremeTower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipod
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipod
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodshuffleGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodshuffleGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodshuffleGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodshuffleGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodshuffleGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodshuffleGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodshuffleGen4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen4
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodshuffleGen4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodshuffleGen4
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodtouch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodtouch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodtouchSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouchSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodtouchSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouchSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipodtouchLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouchLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipodtouchLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipodtouchLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flipphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flipphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flipphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flipphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_candybarphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.candybarphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_candybarphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.candybarphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Landscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Landscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1RadiowavesLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1SlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1SlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1SlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1SlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen1BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1BadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen1BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen1BadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Landscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Landscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2RadiowavesLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2SlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2SlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2SlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2SlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen2BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2BadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen2BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen2BadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Landscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Landscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3RadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3RadiowavesLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Slash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3Slash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3Slash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3SlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3SlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3SlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3SlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3SlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3SlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneGen3BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3BadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneGen3BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneGen3BadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneRadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRadiowavesLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneAndArrowLeftAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneAndArrowLeftAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneAndArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneAndArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnUpForwardIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpForwardIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnUpForwardIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpForwardIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnUpForwardIphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpForwardIphoneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnUpForwardIphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpForwardIphoneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneRearCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRearCamera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneRearCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneRearCamera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appsIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appsIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appsIphoneBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphoneBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appsIphoneBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphoneBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appsIphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphoneLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appsIphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIphoneLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledTopIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledTopIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledBottomIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledBottomIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledTopAndArrowUpIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopAndArrowUpIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledTopAndArrowUpIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopAndArrowUpIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledBottomAndArrowDownIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomAndArrowDownIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledBottomAndArrowDownIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomAndArrowDownIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platter2FilledIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platter2FilledIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platter2FilledIphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIphoneLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platter2FilledIphoneLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIphoneLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIphoneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIphoneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIphoneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSmartbatterycaseGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSmartbatterycaseGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSmartbatterycaseGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSmartbatterycaseGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSmartbatterycaseGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSmartbatterycaseGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSmartbatterycaseGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSmartbatterycaseGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen1BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1BadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen1BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1BadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen1Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1Landscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen1Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1Landscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen1LandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1LandscapeBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen1LandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen1LandscapeBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen2BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2BadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen2BadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2BadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen2Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2Landscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen2Landscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2Landscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadGen2LandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2LandscapeBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadGen2LandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadGen2LandscapeBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadLandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadLandscapeBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadLandscapeBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadLandscapeBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadAndIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndIphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadAndIphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndIphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadAndIphoneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndIphoneSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadAndIphoneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndIphoneSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadAndArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadRearCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadRearCamera
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadRearCamera_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadRearCamera
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appsIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appsIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appsIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIpadLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appsIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appsIpadLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIpadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIpadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledIpadLandscapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadLandscapeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledIpadLandscapeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledIpadLandscapeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platter2FilledIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platter2FilledIpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platter2FilledIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIpadLandscape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platter2FilledIpadLandscape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platter2FilledIpadLandscape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadCaseAndIphoneCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadCaseAndIphoneCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadCaseAndIphoneCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadCaseAndIphoneCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iphoneSizes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSizes
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iphoneSizes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iphoneSizes
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ipadSizes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadSizes
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ipadSizes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ipadSizes
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_smartphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smartphone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_smartphone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.smartphone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionpro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionpro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgePlayFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproBadgePlayFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproAndArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproAndArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_visionproAndArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproAndArrowForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_visionproAndArrowForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.visionproAndArrowForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macbookAndVisionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndVisionpro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macbookAndVisionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macbookAndVisionpro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headProfileArrowForwardAndVisionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headProfileArrowForwardAndVisionpro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headProfileArrowForwardAndVisionpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headProfileArrowForwardAndVisionpro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_opticidFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticidFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_opticidFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.opticidFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_panoBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_panoBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_panoBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoBadgePlayFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_panoBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoBadgePlayFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_viewfinderRectangular_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderRectangular
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_viewfinderRectangular_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderRectangular
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencil
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencil_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencil
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilAndScribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAndScribble
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilAndScribble_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAndScribble
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilTip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilTip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilTip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilTip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilAdapterUsbC_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAdapterUsbC
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilAdapterUsbC_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAdapterUsbC
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applepencilAdapterUsbCFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAdapterUsbCFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applepencilAdapterUsbCFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applepencilAdapterUsbCFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magicmouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magicmouse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magicmouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magicmouse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magicmouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magicmouseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magicmouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magicmouseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_computermouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.computermouse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_computermouse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.computermouse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_computermouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.computermouseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_computermouseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.computermouseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_watchAnalog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.watchAnalog
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_watchAnalog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.watchAnalog
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchWatchface_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchWatchface
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchWatchface_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchWatchface
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkApplewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkApplewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockApplewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockApplewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lockOpenApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenApplewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lockOpenApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lockOpenApplewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkApplewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkApplewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownApplewatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownApplewatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownApplewatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchAndArrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchAndArrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchAndArrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchSideRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchSideRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchSideRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchSideRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_watchfaceApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.watchfaceApplewatchCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_watchfaceApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.watchfaceApplewatchCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_applewatchCaseInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchCaseInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_applewatchCaseInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.applewatchCaseInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledTopApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopApplewatchCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledTopApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledTopApplewatchCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterFilledBottomApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomApplewatchCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterFilledBottomApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterFilledBottomApplewatchCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterTopApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterTopApplewatchCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterTopApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterTopApplewatchCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_platterBottomApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterBottomApplewatchCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_platterBottomApplewatchCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.platterBottomApplewatchCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownAndSparkles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownAndSparkles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownArrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowClockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownArrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowClockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownArrowClockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowClockwiseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownArrowClockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowClockwiseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownArrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowCounterclockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownArrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowCounterclockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownArrowCounterclockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowCounterclockwiseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownArrowCounterclockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownArrowCounterclockwiseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownPress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownPress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownPressFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownPressFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalArrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowClockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalArrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowClockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalArrowClockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowClockwiseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalArrowClockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowClockwiseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalArrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowCounterclockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalArrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowCounterclockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalArrowCounterclockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowCounterclockwiseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalArrowCounterclockwiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalArrowCounterclockwiseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalPress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalPress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_digitalcrownHorizontalPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalPressFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_digitalcrownHorizontalPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.digitalcrownHorizontalPressFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonVerticalRightPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalRightPress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonVerticalRightPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalRightPress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonVerticalRightPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalRightPressFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonVerticalRightPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalRightPressFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonVerticalLeftPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalLeftPress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonVerticalLeftPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalLeftPress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonVerticalLeftPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalLeftPressFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonVerticalLeftPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonVerticalLeftPressFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonHorizontalTopPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalTopPress
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonHorizontalTopPress_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalTopPress
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonHorizontalTopPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalTopPressFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonHorizontalTopPressFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalTopPressFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsmax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsmax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsmax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsmax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsHeadphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsHeadphones
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsHeadphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsHeadphones
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphones
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphones
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headphonesCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphonesCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headphonesCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphonesCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headphonesCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphonesCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headphonesCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headphonesCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earbuds_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbuds
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earbuds_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbuds
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earbudsCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbudsCase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earbudsCase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbudsCase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earbudsCaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbudsCaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earbudsCaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earbudsCaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earpods_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earpods
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earpods_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earpods
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpods_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpods
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpods_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpods
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseWireless
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseWireless
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseWirelessFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsChargingcaseWirelessFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodspro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodspro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodspro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodspro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodproRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodproRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodproLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodproLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsproChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWireless
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsproChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWireless
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsproChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsproChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsproChargingcaseWirelessRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsproChargingcaseWirelessRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsproChargingcaseWirelessRadiowavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessRadiowavesLeftAndRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsproChargingcaseWirelessRadiowavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsproChargingcaseWirelessRadiowavesLeftAndRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodGen3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodGen3Right
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodGen3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodGen3Right
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodGen3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodGen3Left
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodGen3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodGen3Left
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsGen3ChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3ChargingcaseWireless
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsGen3ChargingcaseWireless_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3ChargingcaseWireless
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airpodsGen3ChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3ChargingcaseWirelessFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airpodsGen3ChargingcaseWirelessFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airpodsGen3ChargingcaseWirelessFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsEarphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsEarphones
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsEarphones_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsEarphones
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatspro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatspro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatspro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatspro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsproChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproChargingcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsproChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproChargingcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsproChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproChargingcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsproChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsproChargingcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeats_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeats_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeatsLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeatsLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeatsLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeats3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeats3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeats3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3Right
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeats3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3Right
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsPowerbeats3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3Left
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsPowerbeats3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsPowerbeats3Left
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobuds_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobuds
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobuds_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobuds
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsChargingcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsChargingcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsChargingcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsChargingcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsplus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsplus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsplusLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsplusLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsplusRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsplusRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsplusChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusChargingcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsplusChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusChargingcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsStudiobudsplusChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusChargingcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsStudiobudsplusChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsStudiobudsplusChargingcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsFitpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitpro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsFitpro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitpro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsFitproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsFitproLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsFitproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsFitproRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsFitproChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproChargingcase
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsFitproChargingcase_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproChargingcase
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_beatsFitproChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproChargingcaseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_beatsFitproChargingcaseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.beatsFitproChargingcaseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodmini2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodmini2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodmini2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodmini2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodmini2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodAndHomepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndHomepodmini
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodAndHomepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndHomepodmini
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodAndHomepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndHomepodminiFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodAndHomepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndHomepodminiFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndHomepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodmini
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndHomepodmini_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodmini
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndHomepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodminiFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndHomepodminiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodminiFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepod2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepod2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepod2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepod2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepod2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndHomepod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepod
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndHomepod_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepod
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndHomepodFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndHomepodFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndHomepodFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeaker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeaker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeaker2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeaker2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeaker2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeaker2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeaker2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndAppletv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndAppletv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndAppletvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodAndAppletvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodminiAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiAndAppletv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodminiAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiAndAppletv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_homepodminiAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiAndAppletvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_homepodminiAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.homepodminiAndAppletvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndAppletv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndAppletv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndAppletv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hifispeakerAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndAppletvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hifispeakerAndAppletvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hifispeakerAndAppletvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen4
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen4
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appletvremoteGen4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen4Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appletvremoteGen4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appletvremoteGen4Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_avRemote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.avRemote
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_avRemote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.avRemote
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_avRemoteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.avRemoteFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_avRemoteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.avRemoteFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magsafeBatterypack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magsafeBatterypack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magsafeBatterypack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magsafeBatterypack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_magsafeBatterypackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magsafeBatterypackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_magsafeBatterypackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.magsafeBatterypackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mediastick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mediastick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mediastick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mediastick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cableConnector_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnector
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cableConnector_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnector
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cableConnectorSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnectorSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cableConnectorSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnectorSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cableConnectorHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnectorHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cableConnectorHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableConnectorHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cableCoaxial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableCoaxial
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cableCoaxial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cableCoaxial
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvInsetFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvInsetFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvInsetFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparklesTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesTv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparklesTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesTv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparklesTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesTvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparklesTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesTvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourkTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourkTv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourkTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourkTv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourkTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourkTvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourkTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourkTvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNoteTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteTv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNoteTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteTv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_musicNoteTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteTvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_musicNoteTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.musicNoteTvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playTv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playTv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playTvFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playTvFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playTvFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoTv
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoTv_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoTv
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvBadgeWifi
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvBadgeWifi_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvBadgeWifi
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvBadgeWifiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvBadgeWifiFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvBadgeWifiFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvBadgeWifiFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvAndHifispeakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndHifispeakerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvAndHifispeakerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndHifispeakerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvAndMediabox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndMediabox
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvAndMediabox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndMediabox
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tvAndMediaboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndMediaboxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tvAndMediaboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tvAndMediaboxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayvideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayvideo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayvideoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayvideoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayvideoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayvideoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayvideoBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayvideoBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayvideoBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayaudio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudio
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayaudio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudio
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayaudioCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayaudioCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayaudioCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayaudioCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplayaudioBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplayaudioBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplayaudioBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_radio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.radio
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_radio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.radio
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_radioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.radioFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_radioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.radioFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shazamLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shazamLogo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shazamLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shazamLogo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shazamLogoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shazamLogoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shazamLogoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shazamLogoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotRadiowavesRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotRadiowavesRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotRadiowavesForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Left
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3Left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Left
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3LeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3LeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3LeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3LeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3LeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3LeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3LeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3LeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3Backward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Backward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3Backward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Backward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3BackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3BackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3BackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3BackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3BackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3BackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3BackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3BackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Right
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3Right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Right
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3RightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3RightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3RightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3RightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3RightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3RightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3RightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3RightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3Forward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Forward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3Forward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3Forward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3ForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3ForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3ForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3ForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wave3ForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3ForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wave3ForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wave3ForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotRadiowavesUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesUpForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotRadiowavesUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotRadiowavesUpForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antennaRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antennaRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antennaRadiowavesLeftAndRightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antennaRadiowavesLeftAndRightSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pip
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pip_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pip
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipExit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipExit
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipExit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipExit
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipEnter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipEnter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipEnter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipEnter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipSwap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipSwap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipSwap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipSwap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pipRemove_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipRemove
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pipRemove_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pipRemove
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timelineSelection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timelineSelection
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timelineSelection_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timelineSelection
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareArrowtriangle4Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareArrowtriangle4Outward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareArrowtriangle4Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareArrowtriangle4Outward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleArrowtriangle2Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleArrowtriangle2Outward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleArrowtriangle2Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleArrowtriangle2Outward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleArrowtriangle2Inward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleArrowtriangle2Inward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitArrowtriangle2Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitArrowtriangle2Outward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitArrowtriangle2Outward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitArrowtriangle2Outward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitArrowtriangle2Inward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitArrowtriangle2Inward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangle2Swap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle2Swap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangle2Swap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangle2Swap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guitars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guitars
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guitars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guitars
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guitarsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guitarsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guitarsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guitarsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplaneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplaneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplaneArrival_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneArrival
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplaneArrival_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneArrival
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_airplaneDeparture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneDeparture
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_airplaneDeparture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.airplaneDeparture
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_car_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_car_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFrontWavesUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFrontWavesUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFrontWavesUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFrontWavesUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFrontWavesDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFrontWavesDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFrontWavesDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFrontWavesDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFrontWavesDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearWavesUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearWavesUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearWavesUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearWavesUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearWavesUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearWavesUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearWavesUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearWavesUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearAndTireMarks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndTireMarks
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearAndTireMarks_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndTireMarks
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearAndTireMarksSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndTireMarksSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearAndTireMarksSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndTireMarksSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCarCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCarCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltCarCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltCarCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltCarCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_car2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_car2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_car2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_car2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.car2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_busFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_busFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_busDoubledecker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busDoubledecker
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_busDoubledecker_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busDoubledecker
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_busDoubledeckerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busDoubledeckerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_busDoubledeckerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.busDoubledeckerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tram_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tram
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tram_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tram
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tramFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tramFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tramCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tramCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tramCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tramCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tramFillTunnel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramFillTunnel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tramFillTunnel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tramFillTunnel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cablecar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cablecar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cablecar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cablecar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cablecarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cablecarFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cablecarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cablecarFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightrail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightrail
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightrail_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightrail
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightrailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightrailFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightrailFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightrailFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ferry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ferry
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ferry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ferry
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ferryFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ferryFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ferryFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ferryFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFerry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFerry
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFerry_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFerry
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carFerryFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFerryFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carFerryFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carFerryFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sailboat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboat
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sailboat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboat
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sailboatFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sailboatFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sailboatCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sailboatCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sailboatCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sailboatCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sailboatCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trainSideFrontCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideFrontCar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trainSideFrontCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideFrontCar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trainSideMiddleCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideMiddleCar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trainSideMiddleCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideMiddleCar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trainSideRearCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideRearCar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trainSideRearCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trainSideRearCar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckBox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBox
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckBox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBox
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckBoxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckBoxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckBoxBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckBoxBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckBoxBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxBadgeClockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckBoxBadgeClockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckBoxBadgeClockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bicycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bicycle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bicycleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bicycleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bicycleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bicycleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bicycleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scooter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scooter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scooter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scooter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stroller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stroller
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stroller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stroller
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_strollerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.strollerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_strollerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.strollerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignRadiowavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignRadiowavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignRadiowavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignRadiowavesRightAndSafetycone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignRadiowavesRightAndSafetycone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignRadiowavesRightAndSafetycone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignRadiowavesRightAndSafetycone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpump_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpump
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpump_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpump
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpArrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpArrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fuelpumpArrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fuelpumpArrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fuelpumpArrowtriangleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evCharger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evCharger
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evCharger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evCharger
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerArrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerArrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evChargerArrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evChargerArrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evChargerArrowtriangleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_engineCombustion_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustion
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_engineCombustion_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustion
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_engineCombustionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_engineCombustionFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_engineCombustionBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_engineCombustionBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_engineCombustionBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_engineCombustionBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.engineCombustionBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightHighBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightHighBeam
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightHighBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightHighBeam
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightHighBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightHighBeamFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightHighBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightHighBeamFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_automaticHeadlightHighBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightHighBeam
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_automaticHeadlightHighBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightHighBeam
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_automaticHeadlightHighBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightHighBeamFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_automaticHeadlightHighBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightHighBeamFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightLowBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightLowBeam
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightLowBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightLowBeam
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightLowBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightLowBeamFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightLowBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightLowBeamFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_automaticHeadlightLowBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightLowBeam
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_automaticHeadlightLowBeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightLowBeam
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_automaticHeadlightLowBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightLowBeamFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_automaticHeadlightLowBeamFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticHeadlightLowBeamFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightFog
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightFog
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightFogFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightFogFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_taillightFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.taillightFog
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_taillightFog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.taillightFog
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_taillightFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.taillightFogFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_taillightFogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.taillightFogFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightDaytime_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightDaytime
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightDaytime_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightDaytime
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_headlightDaytimeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightDaytimeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_headlightDaytimeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.headlightDaytimeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkinglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkinglight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkinglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkinglight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkinglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkinglightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkinglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkinglightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_warninglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.warninglight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_warninglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.warninglight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_warninglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.warninglightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_warninglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.warninglightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkWarninglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkWarninglight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkWarninglight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkWarninglight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkWarninglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkWarninglightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkWarninglightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkWarninglightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightOverheadRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightOverheadRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightOverheadRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightOverheadRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightOverheadLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightOverheadLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lightOverheadLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lightOverheadLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lightOverheadLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_glowplug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.glowplug
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_glowplug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.glowplug
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tirepressure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tirepressure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkTirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTirepressure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkTirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTirepressure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tractionControlTirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressure
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tractionControlTirepressure_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressure
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tractionControlTirepressureSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressureSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tractionControlTirepressureSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressureSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tractionControlTirepressureExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressureExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tractionControlTirepressureExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tractionControlTirepressureExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoWindshield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoWindshield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoWindshield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoWindshield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heatElementWindshield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heatElementWindshield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heatElementWindshield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heatElementWindshield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndWiper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndWiper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndWiperAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndWiperAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndFluidAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndFluidAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndFluidAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndFluidAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndWiperIntermittent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperIntermittent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndWiperIntermittent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperIntermittent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndWiperAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperAndDrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndWiperAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperAndDrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldFrontAndWiperExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldFrontAndWiperExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldFrontAndWiperExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndWiper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndWiper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndWiperAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndWiperAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndFluidAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndFluidAndSpray
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndFluidAndSpray_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndFluidAndSpray
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndWiperIntermittent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperIntermittent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndWiperIntermittent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperIntermittent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndWiperAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperAndDrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndWiperAndDrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperAndDrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_windshieldRearAndWiperExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_windshieldRearAndWiperExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.windshieldRearAndWiperExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideLeftAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeftAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideLeftAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeftAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideRightAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRightAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideRightAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRightAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideLeftAndArrowTurnDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeftAndArrowTurnDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideLeftAndArrowTurnDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideLeftAndArrowTurnDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mirrorSideRightAndArrowTurnDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRightAndArrowTurnDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mirrorSideRightAndArrowTurnDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mirrorSideRightAndArrowTurnDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_automaticBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_automaticBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.automaticBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignBrakesignalSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignBrakesignalSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_absBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_absBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_absBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absBrakesignalSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_absBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absBrakesignalSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_holdBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.holdBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_holdBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.holdBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedBrakesignalSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedBrakesignalSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_retarderBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_retarderBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_retarderBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignalSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_retarderBrakesignalSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignalSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_retarderBrakesignalAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignalAndExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_retarderBrakesignalAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.retarderBrakesignalAndExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fluidBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fluidBrakesignal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fluidBrakesignal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fluidBrakesignal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brakesignalDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brakesignalDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brakesignalDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brakesignalDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_transmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.transmission
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_transmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.transmission
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTransmission
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkTransmission
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerTransmission
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerTransmission
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fluidTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fluidTransmission
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fluidTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fluidTransmission
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dropTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTransmission
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dropTransmission_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dropTransmission
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oilcan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oilcan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oilcan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oilcan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oilcanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oilcanFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oilcanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oilcanFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSeatbelt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbelt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSeatbelt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbelt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSeatbeltAndAirbagOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbeltAndAirbagOn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSeatbeltAndAirbagOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbeltAndAirbagOn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSeatbeltAndAirbagOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbeltAndAirbagOff
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSeatbeltAndAirbagOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSeatbeltAndAirbagOff
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirbagOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirbagOn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirbagOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOff
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirbagOff_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOff
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirbagOn2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOn2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirbagOn2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOn2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirbagOff2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOff2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirbagOff2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirbagOff2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddleAndLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddleAndLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndMiddleAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndMiddleAndLowerAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndMiddleAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndMiddleAndLowerAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndMiddle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndMiddle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndLowerAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionUpperAngledAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionUpperAngledAndLowerAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddleAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddleAndLowerAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAirDistributionMiddleAndLowerAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAirDistributionMiddleAndLowerAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddleAndLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddleAndLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddleAndLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddleAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddleAndLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionLower
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionLower_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionLower
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureSeatedSideAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAutomatic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureSeatedSideAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureSeatedSideAutomatic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChild_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChild
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChild_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChild
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildAndLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildAndLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildAndLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildAndLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_figureChildAndLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_figureChildAndLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.figureChildAndLockOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hazardsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hazardsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hazardsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hazardsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hazardsignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hazardsignFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hazardsignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hazardsignFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yieldsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yieldsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yieldsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yieldsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yieldsignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yieldsignFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yieldsignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yieldsignFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrongwaysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrongwaysign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrongwaysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrongwaysign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wrongwaysignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrongwaysignFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wrongwaysignFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wrongwaysignFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_thermometerAndLiquidWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerAndLiquidWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_thermometerAndLiquidWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.thermometerAndLiquidWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelArrowtriangleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelArrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelArrowtriangleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelArrowtriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelArrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelArrowtriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelAndKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndKey
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelAndKey_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndKey
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelAndLiquidWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndLiquidWave
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelAndLiquidWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelAndLiquidWave
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parkingsignSteeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignSteeringwheel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parkingsignSteeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parkingsignSteeringwheel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftAndHeatWavesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftAndHeatWavesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftAndHeatWavesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftAndHeatWavesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightAndHeatWaves
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightAndHeatWaves_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightAndHeatWaves
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightAndHeatWavesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightAndHeatWavesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightAndHeatWavesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightAndHeatWavesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftMassage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftMassage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftMassage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftMassage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftMassageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftMassageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftMassageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftMassageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightMassage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightMassage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightMassage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightMassage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightMassageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightMassageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightMassageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightMassageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftFan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftFan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftFanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFanFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftFanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftFanFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightFan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightFan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightFanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFanFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightFanFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightFanFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeft3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeft3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeft3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRight3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRight3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRight3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftForwardAndBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftForwardAndBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftForwardAndBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftForwardAndBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftForwardAndBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftForwardAndBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftForwardAndBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftForwardAndBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightForwardAndBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightForwardAndBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightForwardAndBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightForwardAndBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightForwardAndBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightForwardAndBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightForwardAndBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightForwardAndBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftBackrestUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftBackrestUpAndDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftBackrestUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftBackrestUpAndDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftBackrestUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftBackrestUpAndDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftBackrestUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftBackrestUpAndDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightBackrestUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightBackrestUpAndDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightBackrestUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightBackrestUpAndDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightBackrestUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightBackrestUpAndDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightBackrestUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightBackrestUpAndDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftUpAndDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftUpAndDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatLeftUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftUpAndDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatLeftUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatLeftUpAndDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightUpAndDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightUpAndDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carseatRightUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightUpAndDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carseatRightUpAndDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carseatRightUpAndDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFrontOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFrontOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFrontOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideFrontOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirCirculate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirCirculate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirCirculateFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirCirculateFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirFresh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirFresh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirFreshFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAirFreshFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAndExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAndExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAndExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideAndExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideLockOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFrontOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFrontOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFrontOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideFrontOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideRearOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideRearOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideRearOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideRearOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideRearOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideRearOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideRearOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideRearOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirCirculate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirCirculate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirCirculateFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirCirculateFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirFresh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirFresh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirFreshFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAirFreshFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAndExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAndExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAndExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideAndExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideLockOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFrontOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideFrontOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFrontOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFrontOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideFrontOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideFrontOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirCirculate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAirCirculate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirCirculate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirCirculateFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAirCirculateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirCirculateFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirFresh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAirFresh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirFresh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirFreshFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAirFreshFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAirFreshFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAndExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAndExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAndExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAndExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideAndExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideAndExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideArrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideArrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideLockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideLockOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideLockOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideLockOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideHillUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideHillUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideHillDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_suvSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_suvSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.suvSideHillDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideHillDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_truckPickupSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_truckPickupSideHillDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.truckPickupSideHillDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearAndCollisionAndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndCollisionAndcarSideFront
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearAndCollisionAndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndCollisionAndcarSideFront
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearAndCollisionAndcarSideFrontSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndCollisionAndcarSideFrontSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearAndCollisionAndcarSideFrontSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndCollisionAndcarSideFrontSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearAndWave3AndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndWave3AndcarSideFront
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearAndWave3AndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndWave3AndcarSideFront
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carSideRearAndExclamationmarkAndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndExclamationmarkAndcarSideFront
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carSideRearAndExclamationmarkAndcarSideFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carSideRearAndExclamationmarkAndcarSideFront
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorRearLeftAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndRearLeftAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontRightAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontRightAndRearLeftAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorFrontLeftAndFrontRightAndRearLeftAndRearRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorSlidingLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingLeftOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorSlidingLeftOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingLeftOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorSlidingLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingLeftOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorSlidingLeftOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingLeftOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorSlidingRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingRightOpen
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorSlidingRightOpen_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingRightOpen
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopDoorSlidingRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingRightOpenFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopDoorSlidingRightOpenFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopDoorSlidingRightOpenFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopFrontleftArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontleftArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopFrontleftArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontleftArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopFrontleftArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontleftArrowtriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopFrontleftArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontleftArrowtriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRearleftArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearleftArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRearleftArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearleftArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRearleftArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearleftArrowtriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRearleftArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearleftArrowtriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopFrontrightArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontrightArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopFrontrightArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontrightArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopFrontrightArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontrightArrowtriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopFrontrightArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopFrontrightArrowtriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRearrightArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearrightArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRearrightArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearrightArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRearrightArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearrightArrowtriangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRearrightArrowtriangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRearrightArrowtriangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesFront
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesFront_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesFront
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesFrontFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesFrontFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesFrontFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesFrontFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearLeftAndRearRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftAndRearRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearLeftAndRearRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftAndRearRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearLeftAndRearRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftAndRearRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearLeftAndRearRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearLeftAndRearRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeXmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeXmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopRadiowavesRearRightBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopRadiowavesRearRightBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedDepartureLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedDepartureLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedDepartureLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedDepartureLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedDepartureRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedDepartureRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedDepartureRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedDepartureRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedDepartureRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedArrowtriangleInward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedArrowtriangleInward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedArrowtriangleInward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedArrowtriangleInward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedArrowtriangleInwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedArrowtriangleInwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedArrowtriangleInwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedArrowtriangleInwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedBadgeSteeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedBadgeSteeringwheel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedBadgeSteeringwheel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedBadgeSteeringwheel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carTopLaneDashedBadgeSteeringwheelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedBadgeSteeringwheelFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carTopLaneDashedBadgeSteeringwheelFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carTopLaneDashedBadgeSteeringwheelFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2FrontEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontEngaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2FrontEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontEngaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2RearEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearEngaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2RearEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearEngaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2FrontAndRearEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontAndRearEngaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2FrontAndRearEngaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontAndRearEngaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2FrontDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontDisengaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2FrontDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2FrontDisengaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2RearDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearDisengaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2RearDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearDisengaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2DriveshaftDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2DriveshaftDisengaged
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2DriveshaftDisengaged_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2DriveshaftDisengaged
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_axle2RearLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_axle2RearLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.axle2RearLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_autostartstop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_autostartstop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_autostartstopSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstopSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_autostartstopSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstopSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_autostartstopTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstopTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_autostartstopTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.autostartstopTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUparrowtriangleDownWindowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUparrowtriangleDownWindowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUparrowtriangleDownWindowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUparrowtriangleDownWindowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowRightExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowRightExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowRightBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowRightBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowRightXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowRightXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowRightBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowRightBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowRightBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUparrowtriangleDownWindowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUparrowtriangleDownWindowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUparrowtriangleDownWindowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUparrowtriangleDownWindowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowLeftExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowLeftExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowLeftBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowLeftBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowLeftXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowLeftXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carWindowLeftBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carWindowLeftBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carWindowLeftBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_batteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_batteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_batteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_batteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_batteryblockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_batteryblockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_batteryblockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_batteryblockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.batteryblockSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusAndFluidBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusAndFluidBatteryblock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusAndFluidBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusAndFluidBatteryblock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockStackExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockStackExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusPlusBatteryblockStackExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusPlusBatteryblockStackExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusPlusBatteryblockStackExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBatteryblock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBatteryblock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBatteryblock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boltBatteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBatteryblockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boltBatteryblockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boltBatteryblockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_roadLanes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanes
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_roadLanes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanes
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_roadLanesCurvedLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanesCurvedLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_roadLanesCurvedLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanesCurvedLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_roadLanesCurvedRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanesCurvedRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_roadLanesCurvedRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLanesCurvedRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_roadLaneArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLaneArrowtriangle2Inward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_roadLaneArrowtriangle2Inward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.roadLaneArrowtriangle2Inward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearRoadLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearRoadLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearRoadLaneDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearRoadLaneDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflakeRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeRoadLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflakeRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeRoadLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_snowflakeRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeRoadLaneDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_snowflakeRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.snowflakeRoadLaneDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelRoadLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelRoadLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_steeringwheelRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelRoadLaneDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_steeringwheelRoadLaneDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.steeringwheelRoadLaneDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearAndCollisionRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndCollisionRoadLane
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearAndCollisionRoadLane_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndCollisionRoadLane
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carRearAndCollisionRoadLaneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndCollisionRoadLaneSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carRearAndCollisionRoadLaneSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carRearAndCollisionRoadLaneSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percentAndArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percentAndArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percentAndArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percentAndArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percentAndArrowtriangleFrom0percentTo50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percentAndArrowtriangleFrom0percentTo50percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle33percentAndArrowtriangleFrom0percentTo50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle33percentAndArrowtriangleFrom0percentTo50percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle67percentAndArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle67percentAndArrowtriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle67percentAndArrowtriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle67percentAndArrowtriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle67percentAndArrowtriangleAndCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle67percentAndArrowtriangleAndCar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle67percentAndArrowtriangleAndCar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle67percentAndArrowtriangleAndCar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle84percentExclamation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle84percentExclamation
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeOpenWithLinesNeedle84percentExclamation_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeOpenWithLinesNeedle84percentExclamation
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookAndWrench_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookAndWrench
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookAndWrench_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookAndWrench
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bookAndWrenchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookAndWrenchFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bookAndWrenchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bookAndWrenchFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_horn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.horn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_horn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.horn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hornFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hornFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hornBlast_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornBlast
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hornBlast_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornBlast
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hornBlastFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornBlastFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hornBlastFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hornBlastFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_abs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.abs
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_abs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.abs
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_absCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_absCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_absCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_absCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.absCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mph_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mph
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mph_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mph
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mphCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mphCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mphCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mphCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mphCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mphCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mphCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mphCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kph_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kph
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kph_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kph
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kphCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kphCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kphCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kphCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kphCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kphCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kphCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kphCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twohCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twohCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twohCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twohCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twohCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twohCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twohCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twohCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourh
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourh_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourh
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourhCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourhCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourhCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourhCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourhCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourhCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourhCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourhCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourl_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourl
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourl_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourl
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourlCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourlCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourlCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourlCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourlCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourlCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourlCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourlCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_foura_returnsImage() {
        // Arrange
        let string = String.SFSymbols.foura
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_foura_returnsImage() {
        // Arrange
        let string = String.SFSymbols.foura
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fouraCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fouraCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fouraCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fouraCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fouraCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fouraCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fouraCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fouraCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_licenseplate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.licenseplate
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_licenseplate_returnsImage() {
        // Arrange
        let string = String.SFSymbols.licenseplate
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_licenseplateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.licenseplateFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_licenseplateFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.licenseplateFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcType1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcType1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcType1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcType1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcType2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcType2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcType2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcType2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcType2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcGbT_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcGbT
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcGbT_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcGbT
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugAcGbTFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcGbTFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugAcGbTFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugAcGbTFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcCcs1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcCcs1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcCcs1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs1Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcCcs1Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs1Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcCcs2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcCcs2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcCcs2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcCcs2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcCcs2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcChademo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcChademo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcChademo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcChademo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcChademoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcChademoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcChademoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcChademoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcGbT_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcGbT
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcGbT_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcGbT
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcGbTFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcGbTFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcGbTFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcGbTFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcNacs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcNacs
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcNacs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcNacs
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_evPlugDcNacsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcNacsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_evPlugDcNacsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.evPlugDcNacsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lungs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lungs
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lungs_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lungs
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lungsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lungsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lungsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lungsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_allergens_returnsImage() {
        // Arrange
        let string = String.SFSymbols.allergens
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_allergens_returnsImage() {
        // Arrange
        let string = String.SFSymbols.allergens
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_allergensFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.allergensFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_allergensFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.allergensFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microbe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microbe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microbeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microbeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microbeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microbeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_microbeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_microbeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.microbeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubblesAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubblesAndSparkles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubblesAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubblesAndSparkles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bubblesAndSparklesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubblesAndSparklesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bubblesAndSparklesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bubblesAndSparklesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_medicalThermometer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medicalThermometer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_medicalThermometer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medicalThermometer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_medicalThermometerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medicalThermometerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_medicalThermometerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.medicalThermometerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bandage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bandage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bandage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bandage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bandageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bandageFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bandageFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bandageFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_syringe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.syringe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_syringe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.syringe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_syringeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.syringeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_syringeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.syringeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_facemask_returnsImage() {
        // Arrange
        let string = String.SFSymbols.facemask
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_facemask_returnsImage() {
        // Arrange
        let string = String.SFSymbols.facemask
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_facemaskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.facemaskFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_facemaskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.facemaskFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pills_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pills
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pills_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pills
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pillsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pillsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pillsCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cross_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cross
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cross_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cross
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flask_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flask
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flask_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flask
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flaskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flaskFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flaskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flaskFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_testtube2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.testtube2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_testtube2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.testtube2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ivfluidBag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ivfluidBag
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ivfluidBag_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ivfluidBag
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ivfluidBagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ivfluidBagFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ivfluidBagFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ivfluidBagFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossVial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossVial
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossVial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossVial
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crossVialFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossVialFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crossVialFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crossVialFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflife_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflife
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflife_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflife
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflifeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflifeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflifeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflifeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_staroflifeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_staroflifeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.staroflifeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartTextSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartTextSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartTextSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartTextSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_heartTextSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartTextSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_heartTextSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.heartTextSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareTextSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTextSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareTextSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTextSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareTextsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTextsquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareTextsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareTextsquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hareCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hareCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hareCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hareCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hareCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tortoise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tortoise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tortoiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tortoiseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tortoiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tortoiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tortoiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tortoiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tortoiseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dog
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dog_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dog
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dogFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dogCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dogCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dogCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dogCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dogCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cat
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cat
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_catFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_catFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_catCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_catCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_catCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_catCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.catCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lizard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lizard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lizardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lizardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lizardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lizardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lizardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lizardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lizardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bird_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bird
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bird_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bird
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_birdFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_birdFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_birdCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_birdCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_birdCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_birdCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birdCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ant_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ant
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ant_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ant
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_antCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_antCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.antCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ladybug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybug
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ladybug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybug
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ladybugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ladybugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ladybugCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ladybugCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ladybugCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ladybugCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ladybugCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fish_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fish
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fish_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fish
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fishFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fishFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fishCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fishCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fishCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fishCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fishCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pawprint_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprint
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pawprint_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprint
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pawprintFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pawprintFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pawprintCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pawprintCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pawprintCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pawprintCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pawprintCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teddybear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teddybear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teddybear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teddybear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_teddybearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teddybearFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_teddybearFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.teddybearFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leaf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leaf
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leaf_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leaf
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leafFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leafFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leafCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leafCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leafCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leafCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leafArrowTriangleCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafArrowTriangleCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leafArrowTriangleCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leafArrowTriangleCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laurelLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laurelLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laurelLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laurelLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_laurelTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laurelTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_laurelTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.laurelTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMacro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacro
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMacro_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacro
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMacroCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacroCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMacroCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacroCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMacroCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacroCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMacroCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMacroCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tree_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tree
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tree_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tree
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_treeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_treeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_treeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_treeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_treeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_treeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.treeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hanger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hanger
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hanger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hanger
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_crownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_crownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.crownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tshirt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tshirt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tshirtFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tshirtFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tshirtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tshirtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tshirtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tshirtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tshirtCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoe_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoe2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoe2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoe2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoe2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoe2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shoeprintsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeprintsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shoeprintsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shoeprintsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_film_returnsImage() {
        // Arrange
        let string = String.SFSymbols.film
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_film_returnsImage() {
        // Arrange
        let string = String.SFSymbols.film
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filmFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filmFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filmCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filmCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filmCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filmCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filmStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filmStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_filmStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_filmStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.filmStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_movieclapper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.movieclapper
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_movieclapper_returnsImage() {
        // Arrange
        let string = String.SFSymbols.movieclapper
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_movieclapperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.movieclapperFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_movieclapperFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.movieclapperFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ticket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ticket
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ticket_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ticket
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ticketFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ticketFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ticketFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ticketFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faceSmiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceSmiling
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faceSmiling_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceSmiling
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faceSmilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceSmilingInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faceSmilingInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceSmilingInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faceDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faceDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_faceDashedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceDashedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_faceDashedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.faceDashedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eye_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eye
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eye_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eye
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSlashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeSlashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeSlashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyes
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyes_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyes
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyesInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyesInverse
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyesInverse_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyesInverse
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyebrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyebrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyebrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyebrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nose_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nose
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nose_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nose
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_noseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noseFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_noseFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.noseFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_comb_returnsImage() {
        // Arrange
        let string = String.SFSymbols.comb
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_comb_returnsImage() {
        // Arrange
        let string = String.SFSymbols.comb
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_combFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.combFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_combFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.combFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mustache_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mustache
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mustache_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mustache
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mustacheFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mustacheFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mustacheFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mustacheFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mouth_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mouth
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mouth_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mouth
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mouthFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mouthFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mouthFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mouthFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeglasses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeglasses
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeglasses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeglasses
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eyeglassesSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeglassesSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eyeglassesSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eyeglassesSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunglasses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunglasses
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunglasses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunglasses
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sunglassesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunglassesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sunglassesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sunglassesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brainHeadProfile_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainHeadProfile
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brainHeadProfile_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainHeadProfile
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brainHeadProfileFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainHeadProfileFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brainHeadProfileFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainHeadProfileFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brainFilledHeadProfile_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainFilledHeadProfile
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brainFilledHeadProfile_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainFilledHeadProfile
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brain
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brain_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brain
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brainFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brainFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ear
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ear_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ear
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_earBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earBadgeWaveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_earBadgeWaveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.earBadgeWaveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hearingdeviceEar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceEar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hearingdeviceEar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceEar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hearingdeviceEarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceEarFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hearingdeviceEarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceEarFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hearingdeviceAndSignalMeter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceAndSignalMeter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hearingdeviceAndSignalMeter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceAndSignalMeter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hearingdeviceAndSignalMeterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceAndSignalMeterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hearingdeviceAndSignalMeterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hearingdeviceAndSignalMeterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaised_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaised
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaised_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaised
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedApp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedApp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedApp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedAppFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedAppFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedAppFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedFingersSpread_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFingersSpread
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedFingersSpread_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFingersSpread
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handRaisedFingersSpreadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFingersSpreadFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handRaisedFingersSpreadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handRaisedFingersSpreadFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsup_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsup
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsup_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsup
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsupFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsupFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsupCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsupCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsupCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsupCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsupCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsdown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsdown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsdownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsdownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsdownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsdownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handThumbsdownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handThumbsdownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handThumbsdownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handDraw_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handDraw
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handDraw_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handDraw
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handDrawFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handDrawFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handDrawFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handDrawFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handTap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handTap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handTap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handTap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handTapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handTapFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handTapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handTapFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpLeftAndText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftAndText
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpLeftAndText_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftAndText
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpLeftAndTextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftAndTextFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpLeftAndTextFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpLeftAndTextFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndHandPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndHandPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndHandPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndHandPointUpLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFilledAndHandPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFilledAndHandPointUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFilledAndHandPointUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFilledAndHandPointUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndHandPointUpLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndHandPointUpLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndHandPointUpLeftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpBraille_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpBraille
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpBraille_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpBraille
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointUpBrailleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpBrailleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointUpBrailleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointUpBrailleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handPointDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handPointDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handPointDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handWave
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handWave_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handWave
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handWaveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handWaveFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handWaveFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handWaveFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handsClap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsClap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handsClap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsClap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handsClapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsClapFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handsClapFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsClapFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handsAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsAndSparkles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handsAndSparkles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsAndSparkles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_handsAndSparklesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsAndSparklesFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_handsAndSparklesFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.handsAndSparklesFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qrcode_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qrcode
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qrcode_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qrcode
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_barcode_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barcode
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_barcode_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barcode
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_viewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_viewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_viewfinderCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_viewfinderCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_viewfinderCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_viewfinderCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_barcodeViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barcodeViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_barcodeViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.barcodeViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qrcodeViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qrcodeViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qrcodeViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qrcodeViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_docViewfinderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docViewfinderFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_docViewfinderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.docViewfinderFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_locationFillViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationFillViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_locationFillViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.locationFillViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_personFillViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_personFillViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.personFillViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotCircleViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotCircleViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotCircleViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_creditcardViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_creditcardViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.creditcardViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_vialViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vialViewfinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_vialViewfinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vialViewfinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_viewfinderTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_viewfinderTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.viewfinderTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgeArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgeArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgeArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeArrowDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgeArrowDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeArrowDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoBadgeCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBelowPhoto_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBelowPhoto
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBelowPhoto_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBelowPhoto
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBelowPhotoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBelowPhotoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBelowPhotoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBelowPhotoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringCenterWeightedAverage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringCenterWeightedAverage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringCenterWeightedAverage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringCenterWeightedAverage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringCenterWeighted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringCenterWeighted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringCenterWeighted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringCenterWeighted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringMatrix_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringMatrix
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringMatrix_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringMatrix
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringMultispot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringMultispot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringMultispot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringMultispot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringNone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringNone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringNone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringNone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringPartial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringPartial
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringPartial_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringPartial
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringSpot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringSpot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringSpot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringSpot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraMeteringUnknown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringUnknown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraMeteringUnknown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraMeteringUnknown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraAperture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraAperture
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraAperture_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraAperture
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleFilledPatternDiagonallineRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledPatternDiagonallineRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleFilledPatternDiagonallineRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleFilledPatternDiagonallineRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleRectangleFilledPatternDiagonalline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRectangleFilledPatternDiagonalline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleRectangleFilledPatternDiagonalline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRectangleFilledPatternDiagonalline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDashedRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashedRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDashedRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDashedRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleRectangleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRectangleDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleRectangleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleRectangleDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleDashed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleDashedBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashedBadgeRecord
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleDashedBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleDashedBadgeRecord
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectanglePortraitBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBadgePlusFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectanglePortraitBadgePlusFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectanglePortraitBadgePlusFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoFillOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoFillOnRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoFillOnRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoFillOnRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleFillOnrectangleAngledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillOnrectangleAngledFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleFillOnrectangleAngledFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleFillOnrectangleAngledFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoOnRectangleAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoOnRectangleAngled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoOnRectangleAngled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoOnRectangleAngled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_photoStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_photoStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.photoStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparklesRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesRectangleStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparklesRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesRectangleStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sparklesRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesRectangleStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sparklesRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sparklesRectangleStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleStack
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectangleStack_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleStack
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleStackFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectangleStackFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleStackFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFillBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackFillBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFillBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFillBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackFillBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackFillBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePersonCrop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgePersonCrop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePersonCrop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePersonCropFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgePersonCropFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePersonCropFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgePlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleStackBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlayFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleStackBadgePlayFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleStackBadgePlayFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarSquaresLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarSquaresLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarSquaresRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarSquaresRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarSquaresLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarSquaresLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sidebarSquaresTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sidebarSquaresTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sidebarSquaresTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squaresBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresBelowRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squaresBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresBelowRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squaresLeadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresLeadingRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squaresLeadingRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresLeadingRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squaresLeadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresLeadingRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squaresLeadingRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squaresLeadingRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macwindowBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macwindowBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macwindowAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowAndCursorarrow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macwindowAndCursorarrow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowAndCursorarrow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal2RectangleAndArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2RectangleAndArrowTriangle2Circlepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal2RectangleAndArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2RectangleAndArrowTriangle2Circlepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dockArrowUpRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockArrowUpRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dockArrowUpRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockArrowUpRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dockArrowDownRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockArrowDownRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dockArrowDownRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dockArrowDownRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menubarRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menubarRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menubarDockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarDockRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menubarDockRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarDockRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menubarDockRectangleBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarDockRectangleBadgeRecord
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menubarDockRectangleBadgeRecord_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarDockRectangleBadgeRecord
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menubarArrowUpRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarArrowUpRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menubarArrowUpRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarArrowUpRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_menubarArrowDownRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarArrowDownRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_menubarArrowDownRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.menubarArrowDownRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_macwindowOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowOnRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_macwindowOnRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.macwindowOnRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textAndCommandMacwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAndCommandMacwindow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textAndCommandMacwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAndCommandMacwindow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_keyboardMacwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardMacwindow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_keyboardMacwindow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.keyboardMacwindow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_uiwindowSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uiwindowSplit2x1
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_uiwindowSplit2x1_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uiwindowSplit2x1
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mosaic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mosaic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mosaic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mosaic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mosaicFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mosaicFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mosaicFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mosaicFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareOnsquareSquareshapeControlhandles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareSquareshapeControlhandles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareOnsquareSquareshapeControlhandles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareOnsquareSquareshapeControlhandles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeControlhandlesOnsquareshapeControlhandles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeControlhandlesOnsquareshapeControlhandles
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeControlhandlesOnsquareshapeControlhandles_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeControlhandlesOnsquareshapeControlhandles
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pano_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pano
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pano_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pano
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_panoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_panoFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.panoFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndLineVerticalAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndLineVerticalAndSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndLineVerticalAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndLineVerticalAndSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFillAndLineVerticalAndsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillAndLineVerticalAndsquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFillAndLineVerticalAndsquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillAndLineVerticalAndsquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFilledAndLineVerticalAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFilledAndLineVerticalAndSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFilledAndLineVerticalAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFilledAndLineVerticalAndSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareAndLineVerticalAndsquareFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndLineVerticalAndsquareFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareAndLineVerticalAndsquareFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareAndLineVerticalAndsquareFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleConnectedToLineBelow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleConnectedToLineBelow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleConnectedToLineBelow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleConnectedToLineBelow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flowchart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flowchart
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flowchart_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flowchart
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_flowchartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flowchartFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_flowchartFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.flowchartFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalCenter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalCenter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalCenterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalCenterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignHorizontalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalTop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalTop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalTopFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalTopFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalCenter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalCenter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalCenterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalCenterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalBottom
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalBottom
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alignVerticalBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalBottomFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alignVerticalBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alignVerticalBottomFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalTop
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalTop_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalTop
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalTopFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalTopFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalTopFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalCenter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalCenter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalCenterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalCenterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalBottom
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalBottom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalBottom
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeVerticalBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalBottomFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeVerticalBottomFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeVerticalBottomFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalCenter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalCenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalCenter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalCenterFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalCenterFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalCenterFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_distributeHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_distributeHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.distributeHorizontalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_switch2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switch2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_switch2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.switch2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appConnectedToappBelowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appConnectedToappBelowFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appConnectedToappBelowFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appConnectedToappBelowFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightCurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightCurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightCurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightCurvepathFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightCurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightCurvepathFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightFilledCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightFilledCurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointTopleftDownTopointBottomrightFilledCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftDownTopointBottomrightFilledCurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointTopleftFilledDownTopointBottomrightCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftFilledDownTopointBottomrightCurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointTopleftFilledDownTopointBottomrightCurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointTopleftFilledDownTopointBottomrightCurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightScurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightScurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightScurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightScurvepathFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightScurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightScurvepathFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightFilledScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightFilledScurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftForwardTopointToprightFilledScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardTopointToprightFilledScurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftFilledForwardTopointToprightScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftFilledForwardTopointToprightScurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftFilledForwardTopointToprightScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftFilledForwardTopointToprightScurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftForwardToArrowtriangleUturnScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardToArrowtriangleUturnScurvepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftForwardToArrowtriangleUturnScurvepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardToArrowtriangleUturnScurvepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointBottomleftForwardToArrowtriangleUturnScurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardToArrowtriangleUturnScurvepathFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointBottomleftForwardToArrowtriangleUturnScurvepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointBottomleftForwardToArrowtriangleUturnScurvepathFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointForwardTopointCapsulepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointForwardTopointCapsulepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointForwardTopointCapsulepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointForwardTopointCapsulepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pointForwardTopointCapsulepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointForwardTopointCapsulepathFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pointForwardTopointCapsulepathFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pointForwardTopointCapsulepathFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lineweight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineweight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lineweight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lineweight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal2SquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2SquareOnSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal2SquareOnSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2SquareOnSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal2SquareBadgeArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2SquareBadgeArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal2SquareBadgeArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2SquareBadgeArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontal2Gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2Gobackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontal2Gobackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontal2Gobackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontalBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontalBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontalBelowSquareFilledAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSquareFilledAndSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontalBelowSquareFilledAndSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSquareFilledAndSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontalBelowSquareAndSquareFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSquareAndSquareFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontalBelowSquareAndSquareFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSquareAndSquareFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderHorizontalBelowSunMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSunMax
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderHorizontalBelowSunMax_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderHorizontalBelowSunMax
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sliderVertical3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderVertical3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sliderVertical3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sliderVertical3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cube_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cube
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cube_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cube
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cubeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cubeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cubeTransparent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeTransparent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cubeTransparent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeTransparent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cubeTransparentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeTransparentFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cubeTransparentFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cubeTransparentFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingbox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingbox
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingbox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingbox
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingboxFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingboxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingboxCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingboxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingboxCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingboxAndArrowBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxAndArrowBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingboxAndArrowBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxAndArrowBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shippingboxAndArrowBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxAndArrowBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shippingboxAndArrowBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shippingboxAndArrowBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arkit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arkit
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arkit_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arkit
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arkitBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arkitBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arkitBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arkitBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cone
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cone_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cone
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coneFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coneFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coneFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pyramid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pyramid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pyramid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pyramid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pyramidFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pyramidFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pyramidFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pyramidFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dDownRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dDownRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dDownForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dDownForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dDownForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpBadgeAutomatic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpBadgeAutomatic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpBadgeAutomaticFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpBadgeAutomaticFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpBadgeAutomaticFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpTrianglebadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpTrianglebadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpTrianglebadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dUpSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpSlashFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dUpSlashFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dUpSlashFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dForwardDottedline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dForwardDottedline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dForwardDottedline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dForwardDottedline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareStack3dForwardDottedlineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dForwardDottedlineFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareStack3dForwardDottedlineFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareStack3dForwardDottedlineFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_livephoto_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephoto
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_livephoto_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephoto
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_livephotoSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_livephotoSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_livephotoBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoBadgeAutomatic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_livephotoBadgeAutomatic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoBadgeAutomatic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_livephotoPlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoPlay
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_livephotoPlay_returnsImage() {
        // Arrange
        let string = String.SFSymbols.livephotoPlay
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fCursive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursive
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fCursive_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursive
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fCursiveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursiveCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fCursiveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursiveCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fCursiveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursiveCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fCursiveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCursiveCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotScope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScope
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotScope_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotScope
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_helm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.helm
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_helm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.helm
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeCheckmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeCheckmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeCheckmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeXmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeXmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeQuestionmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeQuestionmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeExclamationmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockBadgeExclamationmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockBadgeExclamationmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deskclock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskclock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deskclock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskclock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_deskclockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskclockFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_deskclockFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.deskclockFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alarm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarm
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alarm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarm
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alarmFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alarmFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alarmWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmWavesLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alarmWavesLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmWavesLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_alarmWavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmWavesLeftAndRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_alarmWavesLeftAndRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.alarmWavesLeftAndRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stopwatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopwatch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stopwatch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopwatch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_stopwatchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopwatchFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_stopwatchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.stopwatchFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartXyaxisLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartXyaxisLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartXyaxisLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartXyaxisLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithNeedle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithNeedle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithNeedle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithNeedle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gaugeWithNeedleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithNeedleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gaugeWithNeedleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gaugeWithNeedleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timerCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timerCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_timerSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_timerSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.timerSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_clockArrow2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockArrow2Circlepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_clockArrow2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.clockArrow2Circlepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickConsole_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickConsole
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickConsole_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickConsole
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickConsoleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickConsoleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickConsoleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickConsoleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowLeftAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowLeftAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowLeftAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowUpAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowUpAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowUpAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowUpAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arcadeStickAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arcadeStickAndArrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arcadeStickAndArrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gamecontroller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gamecontroller
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gamecontroller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gamecontroller
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gamecontrollerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gamecontrollerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gamecontrollerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gamecontrollerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystick
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystick_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystick
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickPressDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickPressDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickPressDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickPressDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickPressDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickPressDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickPressDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickPressDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickPressDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickPressDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickPressDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickPressDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickPressDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickPressDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickPressDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickPressDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lJoystickTiltDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lJoystickTiltDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lJoystickTiltDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rJoystickTiltDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rJoystickTiltDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rJoystickTiltDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCross_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCross
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCross_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCross
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCrossFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCrossFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCrossLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossLeftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCrossLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossLeftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCrossUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossUpFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCrossUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossUpFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCrossRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossRightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCrossRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossRightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleGridCrossDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossDownFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleGridCrossDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleGridCrossDownFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpad
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpad_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpad
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpadFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpadLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadLeftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpadLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadLeftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpadUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadUpFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpadUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadUpFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpadRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadRightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpadRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadRightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dpadDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadDownFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dpadDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dpadDownFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeys_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeys
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeys_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeys
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeysFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeysFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeysUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysUpFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeysUpFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysUpFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeysDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysDownFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeysDownFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysDownFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeysLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysLeftFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeysLeftFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysLeftFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowkeysRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysRightFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowkeysRightFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowkeysRightFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circlecircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlecircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circlecircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circlecircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_triangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_triangleCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.triangleCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paddleshifterLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paddleshifterLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paddleshifterLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paddleshifterLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paddleshifterRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paddleshifterRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paddleshifterRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paddleshifterRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paddleshifterRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rbCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rbCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rtCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rtCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l4ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l4ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l4ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l4ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r4ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r4ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r4ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r4ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lmButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lmButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lmButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lmButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lmButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lmButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lmButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lmButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rmButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rmButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rmButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rmButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rmButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rmButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rmButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rmButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m1ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m1ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m1ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m1ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m1ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m1ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m1ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m1ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m2ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m2ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m2ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m2ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m2ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m2ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m2ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m2ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m3ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m3ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m3ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m3ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m3ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m3ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m3ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m3ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m4ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m4ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_m4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m4ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_m4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.m4ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p1ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p1ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p1ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p1ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p1ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p1ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p1ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p1ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p2ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p2ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p2ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p2ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p2ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p2ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p2ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p2ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p3ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p3ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p3ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p3ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p3ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p3ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p3ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p3ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p4ButtonHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p4ButtonHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p4ButtonHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_p4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p4ButtonHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_p4ButtonHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.p4ButtonHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2ButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2ButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2ButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2ButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2ButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2ButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2ButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2ButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ltButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ltButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ltButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ltButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ltButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rtButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rtButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rtButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rtButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rtButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zlButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zlButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zlButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zlButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zlButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zlButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zlButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zlButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zrButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zrButtonRoundedtopHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zrButtonRoundedtopHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zrButtonRoundedtopHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zrButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zrButtonRoundedtopHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zrButtonRoundedtopHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zrButtonRoundedtopHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l1ButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1ButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l1ButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1ButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l1ButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1ButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l1ButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l1ButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r1ButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1ButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r1ButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1ButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r1ButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1ButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r1ButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r1ButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lbButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lbButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lbButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lbButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lbButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rbButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbButtonRoundedbottomHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rbButtonRoundedbottomHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbButtonRoundedbottomHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rbButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbButtonRoundedbottomHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rbButtonRoundedbottomHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rbButtonRoundedbottomHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2ButtonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonAngledtopVerticalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2ButtonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonAngledtopVerticalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l2ButtonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonAngledtopVerticalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l2ButtonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l2ButtonAngledtopVerticalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleButtonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleButtonAngledtopVerticalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleButtonAngledtopVerticalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleButtonAngledtopVerticalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleOnrectangleButtonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleButtonAngledtopVerticalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleOnrectangleButtonAngledtopVerticalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleOnrectangleButtonAngledtopVerticalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledtopVerticalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2ButtonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonAngledtopVerticalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2ButtonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonAngledtopVerticalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r2ButtonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonAngledtopVerticalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r2ButtonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r2ButtonAngledtopVerticalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalButtonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalButtonAngledtopVerticalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalButtonAngledtopVerticalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalButtonAngledtopVerticalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalButtonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalButtonAngledtopVerticalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalButtonAngledtopVerticalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalButtonAngledtopVerticalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l3ButtonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l3ButtonAngledbottomHorizontalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l3ButtonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l3ButtonAngledbottomHorizontalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_l3ButtonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l3ButtonAngledbottomHorizontalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_l3ButtonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.l3ButtonAngledbottomHorizontalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lsbButtonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lsbButtonAngledbottomHorizontalLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lsbButtonAngledbottomHorizontalLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lsbButtonAngledbottomHorizontalLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lsbButtonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lsbButtonAngledbottomHorizontalLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lsbButtonAngledbottomHorizontalLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lsbButtonAngledbottomHorizontalLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_buttonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_buttonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.buttonAngledbottomHorizontalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r3ButtonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r3ButtonAngledbottomHorizontalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r3ButtonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r3ButtonAngledbottomHorizontalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_r3ButtonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r3ButtonAngledbottomHorizontalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_r3ButtonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.r3ButtonAngledbottomHorizontalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rsbButtonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rsbButtonAngledbottomHorizontalRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rsbButtonAngledbottomHorizontalRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rsbButtonAngledbottomHorizontalRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rsbButtonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rsbButtonAngledbottomHorizontalRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rsbButtonAngledbottomHorizontalRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rsbButtonAngledbottomHorizontalRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalAccelerator_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalAccelerator
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalAccelerator_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalAccelerator
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalAcceleratorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalAcceleratorFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalAcceleratorFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalAcceleratorFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalBrake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalBrake
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalBrake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalBrake
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalBrakeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalBrakeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalBrakeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalBrakeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalClutch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalClutch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalClutch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalClutch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pedalClutchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalClutchFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pedalClutchFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pedalClutchFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshiftLayoutSixspeed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshiftLayoutSixspeed
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshiftLayoutSixspeed_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshiftLayoutSixspeed
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_playstationLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playstationLogo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_playstationLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.playstationLogo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xboxLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xboxLogo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xboxLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xboxLogo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintpalette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintpalette
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintpalette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintpalette
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paintpaletteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintpaletteFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paintpaletteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paintpaletteFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swatchpalette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swatchpalette
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swatchpalette_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swatchpalette
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swatchpaletteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swatchpaletteFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swatchpaletteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swatchpaletteFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cupAndSaucer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cupAndSaucer
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cupAndSaucer_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cupAndSaucer
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cupAndSaucerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cupAndSaucerFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cupAndSaucerFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cupAndSaucerFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mug
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mug_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mug
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mugFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mugFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mugFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_takeoutbagAndCupAndStraw_returnsImage() {
        // Arrange
        let string = String.SFSymbols.takeoutbagAndCupAndStraw
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_takeoutbagAndCupAndStraw_returnsImage() {
        // Arrange
        let string = String.SFSymbols.takeoutbagAndCupAndStraw
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_takeoutbagAndCupAndStrawFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.takeoutbagAndCupAndStrawFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_takeoutbagAndCupAndStrawFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.takeoutbagAndCupAndStrawFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wineglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wineglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wineglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wineglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wineglassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wineglassFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wineglassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wineglassFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterbottle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterbottle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterbottle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterbottle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waterbottleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterbottleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waterbottleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waterbottleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_birthdayCake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birthdayCake
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_birthdayCake_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birthdayCake
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_birthdayCakeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birthdayCakeFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_birthdayCakeFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.birthdayCakeFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carrot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carrot
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carrot_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carrot
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_carrotFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carrotFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_carrotFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.carrotFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forkKnife_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnife
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forkKnife_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnife
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forkKnifeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnifeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forkKnifeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnifeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_forkKnifeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnifeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_forkKnifeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.forkKnifeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleCompressVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCompressVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleCompressVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleCompressVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleExpandVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleExpandVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleExpandVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleExpandVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndArrowUpRightAndArrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndArrowUpRightAndArrowDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndArrowUpRightAndArrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndArrowUpRightAndArrowDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleAndArrowUpRightAndArrowDownLeftSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndArrowUpRightAndArrowDownLeftSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleAndArrowUpRightAndArrowDownLeftSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleAndArrowUpRightAndArrowDownLeftSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square2Layers3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square2Layers3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square2Layers3dFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square2Layers3dFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square2Layers3dTopFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dTopFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square2Layers3dTopFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dTopFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square2Layers3dBottomFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dBottomFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square2Layers3dBottomFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square2Layers3dBottomFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownRightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownRightSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownRightSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownRightSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownLeftSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownLeftSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownLeftSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownLeftSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dDownBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dTopFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dTopFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dTopFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dTopFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dMiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dMiddleFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dMiddleFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dMiddleFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_square3Layers3dBottomFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dBottomFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_square3Layers3dBottomFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.square3Layers3dBottomFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleDottedAndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedAndCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleDottedAndCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleDottedAndCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cylinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinder
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cylinder_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinder
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cylinderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cylinderFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cylinderSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderSplit1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cylinderSplit1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderSplit1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cylinderSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderSplit1x2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cylinderSplit1x2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cylinderSplit1x2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cellularbars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cellularbars
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cellularbars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cellularbars
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartPie_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartPie
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartPie_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartPie
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartPieFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartPieFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartPieFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartPieFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarXaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarXaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarXaxisAscending_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxisAscending
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarXaxisAscending_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxisAscending
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartBarXaxisAscendingBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxisAscendingBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartBarXaxisAscendingBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartBarXaxisAscendingBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineUptrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineUptrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineUptrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxisCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineUptrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxisCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineUptrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxisCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineUptrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineUptrendXyaxisCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineDowntrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineDowntrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineDowntrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxisCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineDowntrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxisCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineDowntrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxisCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineDowntrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineDowntrendXyaxisCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineFlattrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineFlattrendXyaxis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineFlattrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxisCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineFlattrendXyaxisCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxisCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartLineFlattrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxisCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartLineFlattrendXyaxisCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartLineFlattrendXyaxisCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chartDotsScatter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartDotsScatter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chartDotsScatter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chartDotsScatter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotSquareshapeSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshapeSplit2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotSquareshapeSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotSquareshapeSplit2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeDottedSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeDottedSplit2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeDottedSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeDottedSplit2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeSplit2x2Dotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit2x2Dotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeSplit2x2Dotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit2x2Dotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit2x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeSplit2x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit2x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareshapeSplit3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit3x3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareshapeSplit3x3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareshapeSplit3x3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_burst_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burst
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_burst_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burst
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_burstFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burstFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_burstFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burstFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPathEcg_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcg
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPathEcg_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcg
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPathEcgRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcgRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPathEcgRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcgRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPathEcgRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcgRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPathEcgRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathEcgRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPathBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPathBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformPathBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformPathBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformPathBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_point3ConnectedTrianglepathDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.point3ConnectedTrianglepathDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_point3ConnectedTrianglepathDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.point3ConnectedTrianglepathDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_point3FilledConnectedTrianglepathDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.point3FilledConnectedTrianglepathDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_point3FilledConnectedTrianglepathDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.point3FilledConnectedTrianglepathDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveform
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveform_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveform
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformSlash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformSlash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformSlash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformBadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformBadgeMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMagnifyingglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformBadgeMagnifyingglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMagnifyingglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformAndPersonFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformAndPersonFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformAndPersonFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformAndPersonFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_waveformBadgeMic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_waveformBadgeMic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.waveformBadgeMic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_simcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_simcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_simcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_simcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_simcard2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_simcard2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_simcard2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard2Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_simcard2Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.simcard2Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sdcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sdcard
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sdcard_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sdcard
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sdcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sdcardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sdcardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sdcardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_esim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.esim
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_esim_returnsImage() {
        // Arrange
        let string = String.SFSymbols.esim
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_esimFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.esimFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_esimFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.esimFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_touchid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.touchid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_touchid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.touchid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bonjour_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bonjour
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bonjour_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bonjour
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_atom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atom
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_atom_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atom
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scalemass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scalemass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scalemass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scalemass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_scalemassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scalemassFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_scalemassFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.scalemassFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_angle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.angle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_angle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.angle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_compassDrawing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.compassDrawing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_compassDrawing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.compassDrawing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeDesk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeDesk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeDesk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_globeDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeDeskFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_globeDeskFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.globeDeskFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fossilShell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fossilShell
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fossilShell_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fossilShell
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fossilShellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fossilShellFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fossilShellFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fossilShellFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gift
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gift_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gift
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_giftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_giftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_giftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_giftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_giftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_giftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.giftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglass
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglass_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglass
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassAndLock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassAndLock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassAndLock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassBottomhalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassBottomhalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassBottomhalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hourglassTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassTophalfFilled
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hourglassTophalfFilled_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hourglassTophalfFilled
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_banknote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.banknote
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_banknote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.banknote
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_banknoteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.banknoteFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_banknoteFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.banknoteFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignArrowCirclepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsignArrowCirclepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignArrowCirclepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_purchased_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchased
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_purchased_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchased
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_purchasedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchasedCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_purchasedCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchasedCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_purchasedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchasedCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_purchasedCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.purchasedCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_perspective_returnsImage() {
        // Arrange
        let string = String.SFSymbols.perspective
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_perspective_returnsImage() {
        // Arrange
        let string = String.SFSymbols.perspective
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleAndLineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleAndLineHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleAndLineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleAndLineHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_circleAndLineHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleAndLineHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_circleAndLineHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.circleAndLineHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trapezoidAndLineVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trapezoidAndLineVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trapezoidAndLineVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineVerticalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trapezoidAndLineVerticalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineVerticalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trapezoidAndLineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trapezoidAndLineHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_trapezoidAndLineHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineHorizontalFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_trapezoidAndLineHorizontalFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.trapezoidAndLineHorizontalFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aspectratio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aspectratio
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aspectratio_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aspectratio
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aspectratioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aspectratioFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aspectratioFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aspectratioFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cameraFilters_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraFilters
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cameraFilters_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cameraFilters
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareResizeUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResizeUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareResizeUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResizeUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareResizeDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResizeDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareResizeDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResizeDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareResize_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResize
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareResize_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareResize
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio3To4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio3To4
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio3To4_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio3To4
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio3To4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio3To4Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio3To4Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio3To4Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio4To3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio4To3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio4To3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio4To3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio4To3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio4To3Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio4To3Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio4To3Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio9To16_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio9To16
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio9To16_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio9To16
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio9To16Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio9To16Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio9To16Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio9To16Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio16To9_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio16To9
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio16To9_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio16To9
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rectangleRatio16To9Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio16To9Fill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rectangleRatio16To9Fill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rectangleRatio16To9Fill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_skew_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skew
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_skew_returnsImage() {
        // Arrange
        let string = String.SFSymbols.skew
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightRighttriangleLeftRighttriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightRighttriangleLeftRighttriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightRighttriangleLeftRighttriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightRighttriangleLeftRighttriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightRighttriangleLeftRighttriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightRighttriangleLeftRighttriangleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightRighttriangleLeftRighttriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightRighttriangleLeftRighttriangleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownRighttriangleUpRighttriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownRighttriangleUpRighttriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownRighttriangleUpRighttriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownRighttriangleUpRighttriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownRighttriangleUpRighttriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownRighttriangleUpRighttriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownRighttriangleUpRighttriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownRighttriangleUpRighttriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftAndLineVerticalAndarrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftAndLineVerticalAndarrowtriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftAndLineVerticalAndarrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftAndLineVerticalAndarrowtriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftAndLineVerticalAndarrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftAndLineVerticalAndarrowtriangleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftAndLineVerticalAndarrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftAndLineVerticalAndarrowtriangleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightAndLineVerticalAndarrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightAndLineVerticalAndarrowtriangleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightAndLineVerticalAndarrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightAndLineVerticalAndarrowtriangleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightAndLineVerticalAndarrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightAndLineVerticalAndarrowtriangleLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightAndLineVerticalAndarrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightAndLineVerticalAndarrowtriangleLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_grid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.grid
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_grid_returnsImage() {
        // Arrange
        let string = String.SFSymbols.grid
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gridCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gridCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gridCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gridCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gridCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gridCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gridCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gridCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_burn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burn
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_burn_returnsImage() {
        // Arrange
        let string = String.SFSymbols.burn
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lifepreserver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lifepreserver
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lifepreserver_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lifepreserver
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lifepreserverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lifepreserverFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lifepreserverFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lifepreserverFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dotArrowtrianglesUpRightDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotArrowtrianglesUpRightDownLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dotArrowtrianglesUpRightDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dotArrowtrianglesUpRightDownLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_recordingtape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtape
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_recordingtape_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtape
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_recordingtapeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtapeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_recordingtapeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtapeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_recordingtapeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtapeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_recordingtapeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.recordingtapeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_binoculars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binoculars
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_binoculars_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binoculars
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_binocularsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_binocularsFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_binocularsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_binocularsCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_binocularsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_binocularsCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.binocularsCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery100percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery100percentCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery100percentCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery100percentCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery100percentCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery75percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery75percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery75percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery75percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery50percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery50percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery50percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery25percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery25percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery25percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery25percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery0percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery0percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery0percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_battery100percentBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentBolt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_battery100percentBolt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.battery100percentBolt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fibrechannel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fibrechannel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fibrechannel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fibrechannel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checklistUnchecked_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklistUnchecked
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checklistUnchecked_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklistUnchecked
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checklist_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklist
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checklist_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklist
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checklistChecked_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklistChecked
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checklistChecked_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checklistChecked
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_squareFillTextGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillTextGrid1x2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_squareFillTextGrid1x2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.squareFillTextGrid1x2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBullet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBullet
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBullet_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBullet
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listDash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listDash
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listDash_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listDash
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listTriangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listTriangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listTriangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletIndent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletIndent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listNumber_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listNumber
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listNumber_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listNumber
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listStar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listStar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listStar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listStar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_increaseIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.increaseIndent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_increaseIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.increaseIndent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_decreaseIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.decreaseIndent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_decreaseIndent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.decreaseIndent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_decreaseQuotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.decreaseQuotelevel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_decreaseQuotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.decreaseQuotelevel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_increaseQuotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.increaseQuotelevel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_increaseQuotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.increaseQuotelevel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_quotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quotelevel
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_quotelevel_returnsImage() {
        // Arrange
        let string = String.SFSymbols.quotelevel
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listBulletBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletBelowRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listBulletBelowRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listBulletBelowRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeCheckmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBadgeCheckmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeCheckmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textBadgeStar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeStar
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textBadgeStar_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textBadgeStar
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textInsert_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textInsert
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textInsert_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textInsert
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textAppend_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAppend
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textAppend_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAppend
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textLineFirstAndArrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textLineFirstAndArrowtriangleForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textLineFirstAndArrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textLineFirstAndArrowtriangleForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textLineLastAndArrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textLineLastAndArrowtriangleForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textLineLastAndArrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textLineLastAndArrowtriangleForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textQuote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textQuote
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textQuote_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textQuote
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textAlignleft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAlignleft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textAlignleft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAlignleft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textAligncenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAligncenter
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textAligncenter_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAligncenter
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textAlignright_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAlignright
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textAlignright_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textAlignright
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textJustify_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustify
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textJustify_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustify
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textJustifyLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textJustifyLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textJustifyRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textJustifyRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textJustifyLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyLeading
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textJustifyLeading_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyLeading
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textJustifyTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyTrailing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textJustifyTrailing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textJustifyTrailing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textRedaction_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textRedaction
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textRedaction_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textRedaction
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textWordSpacing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textWordSpacing
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textWordSpacing_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textWordSpacing
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownTextHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownTextHorizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownTextHorizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownTextHorizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightTextVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightTextVertical
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightTextVertical_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightTextVertical
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_listAndFilm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listAndFilm
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_listAndFilm_returnsImage() {
        // Arrange
        let string = String.SFSymbols.listAndFilm
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3Horizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3Horizontal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3Horizontal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3Horizontal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalDecrease_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecrease
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalDecrease_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecrease
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalDecreaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecreaseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalDecreaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecreaseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalDecreaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecreaseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalDecreaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalDecreaseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line3HorizontalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line3HorizontalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line3HorizontalCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line2HorizontalDecreaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line2HorizontalDecreaseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line2HorizontalDecreaseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line2HorizontalDecreaseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_line2HorizontalDecreaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line2HorizontalDecreaseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_line2HorizontalDecreaseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.line2HorizontalDecreaseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_character_returnsImage() {
        // Arrange
        let string = String.SFSymbols.character
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_character_returnsImage() {
        // Arrange
        let string = String.SFSymbols.character
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatSizeSmaller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSizeSmaller
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatSizeSmaller_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSizeSmaller
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatSizeLarger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSizeLarger
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatSizeLarger_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSizeLarger
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatSize_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSize
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatSize_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSize
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformat_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAlt
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatAlt_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAlt
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatSuperscript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSuperscript
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatSuperscript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSuperscript
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatSubscript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSubscript
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatSubscript_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatSubscript
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_abc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.abc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_abc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.abc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatAbc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAbc
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatAbc_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAbc
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformatAbcDottedunderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAbcDottedunderline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformatAbcDottedunderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformatAbcDottedunderline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kashidaArabic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kashidaArabic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kashidaArabic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kashidaArabic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bold_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bold
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bold_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bold
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_italic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.italic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_italic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.italic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_underline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.underline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_underline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.underline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_strikethrough_returnsImage() {
        // Arrange
        let string = String.SFSymbols.strikethrough
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_strikethrough_returnsImage() {
        // Arrange
        let string = String.SFSymbols.strikethrough
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shadow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shadow
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shadow_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shadow
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boldItalicUnderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boldItalicUnderline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boldItalicUnderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boldItalicUnderline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_boldUnderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boldUnderline
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_boldUnderline_returnsImage() {
        // Arrange
        let string = String.SFSymbols.boldUnderline
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_view2d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.view2d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_view2d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.view2d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_view3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.view3d
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_view3d_returnsImage() {
        // Arrange
        let string = String.SFSymbols.view3d
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterCursorIbeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterCursorIbeam
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterCursorIbeam_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterCursorIbeam
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fx_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fx
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fx_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fx
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_k_returnsImage() {
        // Arrange
        let string = String.SFSymbols.k
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_k_returnsImage() {
        // Arrange
        let string = String.SFSymbols.k
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sum_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sum
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sum_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sum
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.percent
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_percent_returnsImage() {
        // Arrange
        let string = String.SFSymbols.percent
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_function_returnsImage() {
        // Arrange
        let string = String.SFSymbols.function
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_function_returnsImage() {
        // Arrange
        let string = String.SFSymbols.function
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformat123_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat123
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformat123_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat123
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one23Rectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one23Rectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one23Rectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one23Rectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one23RectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one23RectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one23RectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one23RectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_textformat12_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat12
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_textformat12_returnsImage() {
        // Arrange
        let string = String.SFSymbols.textformat12
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterTextbox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterTextbox
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterTextbox_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterTextbox
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_numbersign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numbersign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_numbersign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numbersign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterSutton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterSutton
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterSutton_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterSutton
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterDuployan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterDuployan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterDuployan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterDuployan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterPhonetic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterPhonetic
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterPhonetic_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterPhonetic
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_characterMagnify_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterMagnify
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_characterMagnify_returnsImage() {
        // Arrange
        let string = String.SFSymbols.characterMagnify
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_paragraphsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paragraphsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_paragraphsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.paragraphsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_info_returnsImage() {
        // Arrange
        let string = String.SFSymbols.info
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_info_returnsImage() {
        // Arrange
        let string = String.SFSymbols.info
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_infoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_infoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.infoSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_at_returnsImage() {
        // Arrange
        let string = String.SFSymbols.at
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_at_returnsImage() {
        // Arrange
        let string = String.SFSymbols.at
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_atCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_atCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_atCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_atCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_atBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atBadgePlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_atBadgePlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atBadgePlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_atBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atBadgeMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_atBadgeMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.atBadgeMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_questionmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_questionmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.questionmarkDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmark2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmark2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmark3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark3
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmark3_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmark3
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkOctagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkOctagon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkOctagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkOctagon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkOctagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkOctagonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkOctagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkOctagonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusRectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusRectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusminus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusminus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusminusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminusCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusminusCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminusCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusminusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminusCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusminusCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusminusCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_plusForwardslashMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusForwardslashMinus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_plusForwardslashMinus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.plusForwardslashMinus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_minusForwardslashPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusForwardslashPlus
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_minusForwardslashPlus_returnsImage() {
        // Arrange
        let string = String.SFSymbols.minusForwardslashPlus
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_multiply_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiply
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_multiply_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiply
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_multiplyCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplyCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_multiplyCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplyCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_multiplyCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplyCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_multiplyCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplyCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_multiplySquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplySquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_multiplySquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplySquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_multiplySquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplySquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_multiplySquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.multiplySquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_divide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divide
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_divide_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divide
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_divideCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_divideCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_divideCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_divideCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_divideSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_divideSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_divideSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_divideSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.divideSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_equal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equal
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_equal_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equal
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_equalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_equalCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_equalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_equalCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_equalSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_equalSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_equalSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_equalSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.equalSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lessthan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lessthan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lessthanCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lessthanCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lessthanCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lessthanCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lessthanSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lessthanSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lessthanSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lessthanSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lessthanSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greaterthan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthan
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greaterthan_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthan
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greaterthanCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greaterthanCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greaterthanCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greaterthanCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greaterthanSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greaterthanSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_greaterthanSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_greaterthanSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.greaterthanSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftForwardslashchevronRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftForwardslashchevronRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftForwardslashchevronRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftForwardslashchevronRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_parentheses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parentheses
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_parentheses_returnsImage() {
        // Arrange
        let string = String.SFSymbols.parentheses
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_curlybraces_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybraces
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_curlybraces_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybraces
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_curlybracesSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybracesSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_curlybracesSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybracesSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_curlybracesSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybracesSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_curlybracesSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.curlybracesSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ellipsisCurlybraces_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCurlybraces
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ellipsisCurlybraces_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ellipsisCurlybraces
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_number_returnsImage() {
        // Arrange
        let string = String.SFSymbols.number
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_number_returnsImage() {
        // Arrange
        let string = String.SFSymbols.number
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_numberCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_numberCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_numberCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_numberCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_numberSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_numberSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_numberSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_numberSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.numberSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkRectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkOctagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkOctagon
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkOctagon_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkOctagon
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xmarkOctagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkOctagonFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xmarkOctagonFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xmarkOctagonFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeQuestionmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleBadgeQuestionmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeQuestionmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeQuestionmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleBadgeQuestionmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeQuestionmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeXmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleBadgeXmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeXmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeXmarkFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleBadgeXmarkFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleBadgeXmarkFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkCircleTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleTrianglebadgeExclamationmark
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkCircleTrianglebadgeExclamationmark_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkCircleTrianglebadgeExclamationmark
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectangle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectangleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectangleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectanglePortrait
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectanglePortrait_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectanglePortrait
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectanglePortraitFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkRectanglePortraitFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkRectanglePortraitFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkShield
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkShield_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkShield
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_checkmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkShieldFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_checkmarkShieldFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.checkmarkShieldFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeft2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronLeft2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronLeft2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronBackward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackward2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronBackward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronBackward2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronRight2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRight2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronRight2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronRight2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronForward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForward2
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronForward2_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronForward2
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronUpchevronDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpchevronDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronUpchevronDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronUpchevronDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chevronCompactForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chevronCompactForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chevronCompactForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpCircleBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircleBadgeClock
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpCircleBadgeClock_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpCircleBadgeClock
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownCircleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircleDotted
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownCircleDotted_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownCircleDotted
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftarrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftarrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftarrowRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftarrowRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftarrowRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftarrowRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftarrowRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftarrowRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftarrowRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftarrowRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftarrowRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUparrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUparrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUparrowDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUparrowDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUparrowDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUparrowDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUparrowDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUparrowDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUparrowDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUparrowDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUparrowDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftarrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftarrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftarrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftarrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftarrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftarrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftarrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftarrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftarrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftarrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftarrowUpRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftarrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftarrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftarrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftarrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftarrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftarrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftarrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftarrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftarrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftarrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftarrowDownRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnRightUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnRightUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnRightUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnRightUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnLeftUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnLeftUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnLeftUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnLeftUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnRightDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnRightDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnRightDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnRightDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTurnLeftDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnLeftDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTurnLeftDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTurnLeftDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeftCircleBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircleBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeftCircleBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftCircleBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackwardCircleBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircleBadgeEllipsis
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackwardCircleBadgeEllipsis_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardCircleBadgeEllipsis
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnUpSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUturnDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUturnDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUturnDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownAndarrowLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownAndarrowLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownAndarrowLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownAndarrowLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndDownRightAndarrowUpRightAndDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndDownRightAndarrowUpRightAndDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndDownRightAndarrowUpRightAndDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndDownRightAndarrowUpRightAndDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCompact
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCompact
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCompact
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCompact
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCompact
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCompact
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowBackwardToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowBackwardToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowBackwardToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCompact
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLineCompact_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCompact
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLine
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardToLine_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLine
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardToLineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardToLineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardToLineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowForwardToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowForwardToLineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowForwardToLineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowLeftAndLineVerticalAndarrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndLineVerticalAndarrowRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowLeftAndLineVerticalAndarrowRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowLeftAndLineVerticalAndarrowRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowRightAndLineVerticalAndarrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightAndLineVerticalAndarrowLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowRightAndLineVerticalAndarrowLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowRightAndLineVerticalAndarrowLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownAndLineHorizontalAndarrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownAndLineHorizontalAndarrowUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownAndLineHorizontalAndarrowUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownAndLineHorizontalAndarrowUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpAndLineHorizontalAndarrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndLineHorizontalAndarrowDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpAndLineHorizontalAndarrowDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpAndLineHorizontalAndarrowDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowClockwiseSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowClockwiseSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowClockwiseSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwise
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwise_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwise
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowCounterclockwiseSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowCounterclockwiseSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowCounterclockwiseSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpLeftAndarrowDownRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpLeftAndarrowDownRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpBackwardAndarrowDownForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpBackwardAndarrowDownForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownLeftAndarrowUpRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownLeftAndarrowUpRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownBackwardAndarrowUpForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownBackwardAndarrowUpForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownRightAndarrowUpLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownRightAndarrowUpLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowDownForwardAndarrowUpBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowDownForwardAndarrowUpBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpRightAndarrowDownLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpRightAndarrowDownLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowUpForwardAndarrowDownBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowUpForwardAndarrowDownBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_returnImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImage
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_returnImage_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImage
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_returnImageLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImageLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_returnImageLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImageLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_returnImageRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImageRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_returnImageRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.returnImageRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrow2Squarepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrow2Squarepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrow2Squarepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrow2Squarepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2Circlepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2Circlepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangle2CirclepathCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangle2CirclepathCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangle2CirclepathCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_exclamationmarkArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkArrowTriangle2Circlepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_exclamationmarkArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.exclamationmarkArrowTriangle2Circlepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gearshapeArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeArrowTriangle2Circlepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gearshapeArrowTriangle2Circlepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gearshapeArrowTriangle2Circlepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleCapsulepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleCapsulepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleCapsulepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleCapsulepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrow3Trianglepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrow3Trianglepath
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrow3Trianglepath_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrow3Trianglepath
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleTurnUpRightDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightDiamond
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleTurnUpRightDiamond_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightDiamond
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleTurnUpRightDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightDiamondFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleTurnUpRightDiamondFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightDiamondFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleTurnUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleTurnUpRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleTurnUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleTurnUpRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleTurnUpRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleMerge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleMerge
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleMerge_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleMerge
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleSwap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleSwap
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleSwap_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleSwap
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTriangleBranch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleBranch
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTriangleBranch_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTriangleBranch
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowTrianglePull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTrianglePull
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowTrianglePull_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowTrianglePull
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeft
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeft_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeft
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleLeftSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleLeftSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleBackwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleBackwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRight
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRight_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRight
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleRightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleRightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForward
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForward_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForward
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForwardFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForwardCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForwardCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForwardSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleForwardSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleForwardSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUp
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUp_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUp
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUpFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUpCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUpCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUpSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleUpSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleUpSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDown
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDown_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDown
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDownFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDownCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDownCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDownSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_arrowtriangleDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_arrowtriangleDownSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.arrowtriangleDownSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_slashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slashCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_slashCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slashCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_slashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slashCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_slashCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.slashCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_asterisk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asterisk
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_asterisk_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asterisk
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_asteriskCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asteriskCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_asteriskCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asteriskCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_asteriskCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asteriskCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_asteriskCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.asteriskCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.left
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_left_returnsImage() {
        // Arrange
        let string = String.SFSymbols.left
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leftCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leftCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leftCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_leftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leftCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_leftCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.leftCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.right
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_right_returnsImage() {
        // Arrange
        let string = String.SFSymbols.right
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_aSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_aSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.aSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_gSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_gSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.gSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_iSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_iSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.iSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_jSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_jSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.jSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_mSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_mSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.mSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_qSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_qSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.qSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_uCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_uCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_uCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_uCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_uSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_uSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_uSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_uSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.uSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_vCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_vCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_vCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_vCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_vSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_vSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_vSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_vSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.vSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_xSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_xSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.xSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ySquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ySquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ySquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ySquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_ySquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ySquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_ySquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.ySquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dollarsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dollarsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dollarsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_centsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_centsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.centsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_yensignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_yensignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.yensignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sterlingsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sterlingsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sterlingsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_francsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_francsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.francsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_florinsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_florinsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.florinsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_turkishlirasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_turkishlirasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.turkishlirasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rublesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rublesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rublesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurosignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_dongsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_dongsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.dongsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_indianrupeesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_indianrupeesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.indianrupeesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tengesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tengesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tengesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesetasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesetasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesetasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_pesosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_pesosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.pesosignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_kipsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_kipsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.kipsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_wonsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_wonsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.wonsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_lirasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_lirasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.lirasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_hryvniasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_hryvniasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.hryvniasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nairasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nairasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nairasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_guaranisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_guaranisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.guaranisignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_coloncurrencysignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_coloncurrencysignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.coloncurrencysignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cedisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cedisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cedisignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_cruzeirosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_cruzeirosignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.cruzeirosignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_tugriksignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_tugriksignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.tugriksignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_millsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_millsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.millsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_shekelsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_shekelsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.shekelsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_manatsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_manatsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.manatsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_rupeesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_rupeesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.rupeesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bahtsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bahtsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bahtsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_larisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_larisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.larisignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_bitcoinsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_bitcoinsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.bitcoinsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_australiandollarsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_australiandollarsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.australiandollarsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_polishzlotysignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_polishzlotysignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.polishzlotysignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_norwegiankronesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_norwegiankronesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.norwegiankronesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_swedishkronasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_swedishkronasignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.swedishkronasignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_danishkronesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_danishkronesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.danishkronesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eurozonesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eurozonesignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eurozonesignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_brazilianrealsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_brazilianrealsignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.brazilianrealsignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisign
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisign_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisign
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisignCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisignCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisignSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_chineseyuanrenminbisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_chineseyuanrenminbisignSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.chineseyuanrenminbisignSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zeroCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zeroCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zeroCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zeroCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zeroSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zeroSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zeroSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zeroSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zeroSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_oneSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_oneSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.oneSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_twoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_twoSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.twoSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_threeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_threeCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_threeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_threeCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_threeSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_threeSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_threeSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_threeSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.threeSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fourAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fourAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fourAltSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fiveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fiveCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fiveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fiveCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fiveSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fiveSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_fiveSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_fiveSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.fiveSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sixAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sixAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sixAltSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sevenCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sevenCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sevenCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sevenCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sevenSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sevenSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_sevenSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_sevenSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.sevenSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eightCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eightCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eightSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_eightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_eightSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.eightSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltCircle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineAltCircle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltCircle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltCircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineAltCircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltCircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltSquare
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineAltSquare_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltSquare
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_nineAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltSquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_nineAltSquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.nineAltSquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero1SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero2SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero3SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero4SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero5SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero6SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero7SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero8SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_zero9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_zero9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.zero9SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one1SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one2SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one3SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one4SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one5SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one6SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one7SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one8SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_one9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_one9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.one9SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two1SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two2SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two3SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two4SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two5SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two6SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two7SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two8SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_two9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_two9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.two9SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three1SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three2SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three3SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three4SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three5SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three6SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three7SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three8SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_three9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_three9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.three9SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four1Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four1CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four1Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four1SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four1SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four2Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four2CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four2Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four2SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four2SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four3Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four3CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four3Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four3SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four3SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four4Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four4CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four4Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four4SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four4SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four5Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four5CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four5Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four5SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four5SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four6Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four6CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four6Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four6SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four6SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four7Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four7CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four7Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four7SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four7SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four8Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four8CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four8Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four8SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four8SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four9Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four9CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four9Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_four9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_four9SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.four9SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_five0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0Circle
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_five0Circle_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0Circle
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_five0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0CircleFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_five0CircleFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0CircleFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_five0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0Square
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_five0Square_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0Square
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_five0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0SquareFill
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_five0SquareFill_returnsImage() {
        // Arrange
        let string = String.SFSymbols.five0SquareFill
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

#if canImport(UIKit)
    func test_StringExtension_appleLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleLogo
        // Act
        let image = UIImage(systemName: string)
        // Assert
        XCTAssertNotEqual(image, UIImage())
    }
#endif

#if canImport(AppKit)
    func test_StringExtension_appleLogo_returnsImage() {
        // Arrange
        let string = String.SFSymbols.appleLogo
        // Act
        let image = NSImage(systemSymbolName: string, accessibilityDescription:  "This is the symbole for\(string)")
        // Assert
        XCTAssertNotEqual(image, NSImage())
    }
#endif

}
